//------------------------------------------------------------------------------
// <auto-generated>
//     這段程式碼是由工具產生的。
//     執行階段版本:4.0.30319.42000
//
//     對這個檔案所做的變更可能會造成錯誤的行為，而且如果重新產生程式碼，
//     變更將會遺失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace com.mirle.ibg3k0.sc.EqServiceReference {
    using System.Data;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://www.pti.com/WLP/", ConfigurationName="EqServiceReference.ExecuteWLPServiceSoap")]
    public interface ExecuteWLPServiceSoap {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/OCAP_CheckOCAPAllowTrackOut", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string OCAP_CheckOCAPAllowTrackOut(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/OCAP_CheckOCAPAllowTrackOut", ReplyAction="*")]
        System.Threading.Tasks.Task<string> OCAP_CheckOCAPAllowTrackOutAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/OCAP_Issue_OCAPForm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string OCAP_Issue_OCAPForm(string strLotID, string strStage, string strOperation, string strEQPID, string strCollection_Plan, string strTemplateID, string strSampleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/OCAP_Issue_OCAPForm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> OCAP_Issue_OCAPFormAsync(string strLotID, string strStage, string strOperation, string strEQPID, string strCollection_Plan, string strTemplateID, string strSampleID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PLM_GetProcessPlanObj", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PLM_GetProcessPlanObj(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PLM_GetProcessPlanObj", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PLM_GetProcessPlanObjAsync(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PLM_GetProcessTM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PLM_GetProcessTM(string Namespace, string ProductID, int ProductVersion, string RouteName, int RouteVersion, string SAPOperationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PLM_GetProcessTM", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PLM_GetProcessTMAsync(string Namespace, string ProductID, int ProductVersion, string RouteName, int RouteVersion, string SAPOperationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PLM_SetProcessStatus", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PLM_SetProcessStatus(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber, int ActionCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PLM_SetProcessStatus", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PLM_SetProcessStatusAsync(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber, int ActionCode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PM_QueryHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable PM_QueryHistory(string strStartDate, string strEndDate, string strEQP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PM_QueryHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> PM_QueryHistoryAsync(string strStartDate, string strEndDate, string strEQP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CheckCorrelationByLotID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PROD_CheckCorrelationByLotID(string strSourceLotID, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CheckCorrelationByLotID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PROD_CheckCorrelationByLotIDAsync(string strSourceLotID, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CheckReferenceInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PROD_CheckReferenceInformation(string strSourceLotID, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CheckReferenceInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PROD_CheckReferenceInformationAsync(string strSourceLotID, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CreateCorrelationAndSAPPartNoFromPLM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PROD_CreateCorrelationAndSAPPartNoFromPLM(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant, string strOPType, string strSAPPart, string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CreateCorrelationAndSAPPartNoFromPLM", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PROD_CreateCorrelationAndSAPPartNoFromPLMAsync(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant, string strOPType, string strSAPPart, string strUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CreateCorrelationInfoFromPLM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string PROD_CreateCorrelationInfoFromPLM(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_CreateCorrelationInfoFromPLM", ReplyAction="*")]
        System.Threading.Tasks.Task<string> PROD_CreateCorrelationInfoFromPLMAsync(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_GetProcessPlanCertificationEX1", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet PROD_GetProcessPlanCertificationEX1(string strLotID, string strProdNS, string strProdID, int iProdVer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_GetProcessPlanCertificationEX1", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> PROD_GetProcessPlanCertificationEX1Async(string strLotID, string strProdNS, string strProdID, int iProdVer);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_syncProduct", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void PROD_syncProduct(string strProdNS, string[] strFilterName, string[] strFilterValue, string RPT_SrvName, string RPT_DbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/PROD_syncProduct", ReplyAction="*")]
        System.Threading.Tasks.Task PROD_syncProductAsync(string strProdNS, string[] strFilterName, string[] strFilterValue, string RPT_SrvName, string RPT_DbName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateBRCM_RECON", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_CreateBRCM_RECON(string Namespace, string strCust);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateBRCM_RECON", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_CreateBRCM_RECONAsync(string Namespace, string strCust);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateBRCM_WIPCF", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_CreateBRCM_WIPCF(string Namespace, string strCust);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateBRCM_WIPCF", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_CreateBRCM_WIPCFAsync(string Namespace, string strCust);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateOQCShipReport", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Report_CreateOQCShipReport(string strLotID, string strOutputPath, bool bInternal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateOQCShipReport", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Report_CreateOQCShipReportAsync(string strLotID, string strOutputPath, bool bInternal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateOQCShipReportEX", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Report_CreateOQCShipReportEX(string strLotID, string strOutputPath, bool bInternal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_CreateOQCShipReportEX", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Report_CreateOQCShipReportEXAsync(string strLotID, string strOutputPath, bool bInternal);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Create_EntityUtilization", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_Create_EntityUtilization(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate, string strSortColumn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Create_EntityUtilization", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_Create_EntityUtilizationAsync(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate, string strSortColumn);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Create_GetEntityHistory", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_Create_GetEntityHistory(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Create_GetEntityHistory", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_Create_GetEntityHistoryAsync(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_EDCDataByLotAndStage", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet Report_EDCDataByLotAndStage(string strLotID, string strStage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_EDCDataByLotAndStage", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> Report_EDCDataByLotAndStageAsync(string strLotID, string strStage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_GetWIPList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_GetWIPList(int iPageIndex, string chkIgnore, string strLotStatus, string strProdPhase, string[] strFilterNames, string[] strFilterValues, string strOrderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_GetWIPList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_GetWIPListAsync(int iPageIndex, string chkIgnore, string strLotStatus, string strProdPhase, string[] strFilterNames, string[] strFilterValues, string strOrderName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Get_OCAP_List", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_Get_OCAP_List(int iPageIndex, int iPageSize, string[] strFilterNames, string[] strFilterValues, string IssueStartDate, string issueEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Get_OCAP_List", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_Get_OCAP_ListAsync(int iPageIndex, int iPageSize, string[] strFilterNames, string[] strFilterValues, string IssueStartDate, string issueEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Get_WIPHoldLot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Report_Get_WIPHoldLot(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string chkIgnore, string vsSorterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Report_Get_WIPHoldLot", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Report_Get_WIPHoldLotAsync(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string chkIgnore, string vsSorterName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/RTC_CheckState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RTC_CheckState(string strNamespace, string strReticleID, string strLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/RTC_CheckState", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RTC_CheckStateAsync(string strNamespace, string strReticleID, string strLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/RTC_UpdateUsageCountEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string RTC_UpdateUsageCountEx(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, int iShotCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/RTC_UpdateUsageCountEx", ReplyAction="*")]
        System.Threading.Tasks.Task<string> RTC_UpdateUsageCountExAsync(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, int iShotCount);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_Check_DieLot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Runcard_Check_DieLot(string LotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_Check_DieLot", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Runcard_Check_DieLotAsync(string LotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_GetData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Runcard_GetData(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_GetData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Runcard_GetDataAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_GetEntry_Row_ID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Runcard_GetEntry_Row_ID(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_GetEntry_Row_ID", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Runcard_GetEntry_Row_IDAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_GetStageData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Runcard_GetStageData(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_GetStageData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Runcard_GetStageDataAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_Get_Cnt", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Runcard_Get_Cnt(string LotID, int Qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_Get_Cnt", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Runcard_Get_CntAsync(string LotID, int Qty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_InsertLog", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Runcard_InsertLog(string strMsg, string RemoteIP, string Lot, string RUNID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_InsertLog", ReplyAction="*")]
        System.Threading.Tasks.Task Runcard_InsertLogAsync(string strMsg, string RemoteIP, string Lot, string RUNID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/RunCard_IsLastRunCardForTnR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool RunCard_IsLastRunCardForTnR(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/RunCard_IsLastRunCardForTnR", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> RunCard_IsLastRunCardForTnRAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_log", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void Runcard_log(string strAction, string T_ilot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_log", ReplyAction="*")]
        System.Threading.Tasks.Task Runcard_logAsync(string strAction, string T_ilot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_Release_Hold", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Runcard_Release_Hold(string LotID, string RUNID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Runcard_Release_Hold", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Runcard_Release_HoldAsync(string LotID, string RUNID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/SAP_ChkMAPInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string SAP_ChkMAPInfo(string strCustID, string strCustomerLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/SAP_ChkMAPInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<string> SAP_ChkMAPInfoAsync(string strCustID, string strCustomerLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/SG_WorkOrder_CreateWorkOrderInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void SG_WorkOrder_CreateWorkOrderInfo(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/SG_WorkOrder_CreateWorkOrderInfo", ReplyAction="*")]
        System.Threading.Tasks.Task SG_WorkOrder_CreateWorkOrderInfoAsync(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/TCS_TransferDATA_ToTCS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void TCS_TransferDATA_ToTCS(string strNamespace, string strMailGroup, string strFunName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/TCS_TransferDATA_ToTCS", ReplyAction="*")]
        System.Threading.Tasks.Task TCS_TransferDATA_ToTCSAsync(string strNamespace, string strMailGroup, string strFunName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WIP_UpdateForSAPProductionOrderForCK", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable WIP_UpdateForSAPProductionOrderForCK(string strNamespace, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WIP_UpdateForSAPProductionOrderForCK", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> WIP_UpdateForSAPProductionOrderForCKAsync(string strNamespace, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WIP_UpdateWaferProcessValidationForRework", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WIP_UpdateWaferProcessValidationForRework(string strAction, string strLotID, string strMaterialID, string strRW_RouteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WIP_UpdateWaferProcessValidationForRework", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WIP_UpdateWaferProcessValidationForReworkAsync(string strAction, string strLotID, string strMaterialID, string strRW_RouteID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WLP_ExecuteAPIs", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WLP_ExecuteAPIs(string Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WLP_ExecuteAPIs", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WLP_ExecuteAPIsAsync(string Request);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WLP_ExecuteAPIsForClient", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WLP_ExecuteAPIsForClient(string vsFunctionName, string vsInputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WLP_ExecuteAPIsForClient", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WLP_ExecuteAPIsForClientAsync(string vsFunctionName, string vsInputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WLP_ExecuteAPIsForPortCommand", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WLP_ExecuteAPIsForPortCommand(string vsFunctionName, string vsInputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WLP_ExecuteAPIsForPortCommand", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WLP_ExecuteAPIsForPortCommandAsync(string vsFunctionName, string vsInputValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_CreateWorkOrderInfo(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfoAsync(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_CreateWorkOrderInfo2(string sFunctionCode, string sProcessType, string sUser, string XML_WO, string IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo2", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfo2Async(string sFunctionCode, string sProcessType, string sUser, string XML_WO, string IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_CreateWorkOrderInfo3(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo3", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfo3Async(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo_NonCheckSAP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_CreateWorkOrderInfo_NonCheckSAP(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_CreateWorkOrderInfo_NonCheckSAP", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfo_NonCheckSAPAsync(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Delete_APMES_CP_WO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_Delete_APMES_CP_WO(string sINTERNAL_WO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Delete_APMES_CP_WO", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_Delete_APMES_CP_WOAsync(string sINTERNAL_WO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Delete_CP_WO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WorkOrder_Delete_CP_WO(string sINTERNAL_WO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Delete_CP_WO", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WorkOrder_Delete_CP_WOAsync(string sINTERNAL_WO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Load_BR_WO_TO_ZMM_X00_001", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_Load_BR_WO_TO_ZMM_X00_001(string sCustID, string sINTERNAL_WO, string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Load_BR_WO_TO_ZMM_X00_001", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_Load_BR_WO_TO_ZMM_X00_001Async(string sCustID, string sINTERNAL_WO, string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Load_CP_WO", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable WorkOrder_Load_CP_WO(string sCustID, string sFunctionCode, string sUserID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Load_CP_WO", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> WorkOrder_Load_CP_WOAsync(string sCustID, string sFunctionCode, string sUserID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Load_Customer_Reference_Data", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_Load_Customer_Reference_Data(string sCustID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Load_Customer_Reference_Data", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_Load_Customer_Reference_DataAsync(string sCustID, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendDDPFile_ACSMSA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable WorkOrder_SendDDPFile_ACSMSA(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendDDPFile_ACSMSA", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> WorkOrder_SendDDPFile_ACSMSAAsync(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendToCP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_SendToCP(string sLotID, string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendToCP", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_SendToCPAsync(string sLotID, string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendToCP2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_SendToCP2(string sINTERNAL_WO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendToCP2", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_SendToCP2Async(string sINTERNAL_WO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendToCP3", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WorkOrder_SendToCP3(string sLotID, string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_SendToCP3", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WorkOrder_SendToCP3Async(string sLotID, string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Upd_BR_WorkOrderFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void WorkOrder_Upd_BR_WorkOrderFlag(string sCustID, string sINTERNAL_WO, string sFromFlag, string sToFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WorkOrder_Upd_BR_WorkOrderFlag", ReplyAction="*")]
        System.Threading.Tasks.Task WorkOrder_Upd_BR_WorkOrderFlagAsync(string sCustID, string sINTERNAL_WO, string sFromFlag, string sToFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WT_GetLotID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WT_GetLotID(string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WT_GetLotID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WT_GetLotIDAsync(string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WT_QueryLotID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string WT_QueryLotID(string Key1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/WT_QueryLotID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> WT_QueryLotIDAsync(string Key1);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CarrierChangeToForClean", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CarrierChangeToForClean();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CarrierChangeToForClean", ReplyAction="*")]
        System.Threading.Tasks.Task CarrierChangeToForCleanAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CAR_GetCarrierList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CAR_GetCarrierList(string location, string carrierType, string carrierState, string carrierID, int maxCount, string retToken, string locationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CAR_GetCarrierList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CAR_GetCarrierListAsync(string location, string carrierType, string carrierState, string carrierID, int maxCount, string retToken, string locationType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CAR_UpdateLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CAR_UpdateLocation(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CAR_UpdateLocation", ReplyAction="*")]
        System.Threading.Tasks.Task CAR_UpdateLocationAsync(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/chkMapData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void chkMapData(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/chkMapData", ReplyAction="*")]
        System.Threading.Tasks.Task chkMapDataAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_AddEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CRM_AddEntry(string strRelationName, string[] strAttrName, string[] strAttrValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_AddEntry", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CRM_AddEntryAsync(string strRelationName, string[] strAttrName, string[] strAttrValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_AddMultipleRelationEntries", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CRM_AddMultipleRelationEntries(string strRelationNS, string strRelationName, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_AddMultipleRelationEntries", ReplyAction="*")]
        System.Threading.Tasks.Task CRM_AddMultipleRelationEntriesAsync(string strRelationNS, string strRelationName, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_DeleteMultipleRelationEntryLists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CRM_DeleteMultipleRelationEntryLists(string strRelationNS, string strRelationName, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_DeleteMultipleRelationEntryLists", ReplyAction="*")]
        System.Threading.Tasks.Task CRM_DeleteMultipleRelationEntryListsAsync(string strRelationNS, string strRelationName, System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_GetRelationEntryBySQL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable CRM_GetRelationEntryBySQL(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_GetRelationEntryBySQL", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> CRM_GetRelationEntryBySQLAsync(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_GetRelationEntrySpecList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable CRM_GetRelationEntrySpecList(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue, string[] strAttributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_GetRelationEntrySpecList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> CRM_GetRelationEntrySpecListAsync(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue, string[] strAttributeName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_SAP_ProductMapping_AddEntry", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string CRM_SAP_ProductMapping_AddEntry(string mmn01, string mmn02, string mmn03, string mmn04, string mmn05, string mmn06);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CRM_SAP_ProductMapping_AddEntry", ReplyAction="*")]
        System.Threading.Tasks.Task<string> CRM_SAP_ProductMapping_AddEntryAsync(string mmn01, string mmn02, string mmn03, string mmn04, string mmn05, string mmn06);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CR_MTK_CreateBDRFFromTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void CR_MTK_CreateBDRFFromTable(string Namespace, System.Data.DataTable dt_BDRF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/CR_MTK_CreateBDRFFromTable", ReplyAction="*")]
        System.Threading.Tasks.Task CR_MTK_CreateBDRFFromTableAsync(string Namespace, System.Data.DataTable dt_BDRF);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EDC_GetStageEDC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet EDC_GetStageEDC(string strLotID, string strStage, string strOperation, string strBeginDate, string strEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EDC_GetStageEDC", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> EDC_GetStageEDCAsync(string strLotID, string strStage, string strOperation, string strBeginDate, string strEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EDC_SavePLP_SP_RAWDATA", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EDC_SavePLP_SP_RAWDATA(string strLotID, string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EDC_SavePLP_SP_RAWDATA", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EDC_SavePLP_SP_RAWDATAAsync(string strLotID, string strXML);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetBuleTapeInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet EI_GetBuleTapeInformation(string strCustomerLotID, int iCallerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetBuleTapeInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> EI_GetBuleTapeInformationAsync(string strCustomerLotID, int iCallerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetCarrierGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable EI_GetCarrierGroup();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetCarrierGroup", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> EI_GetCarrierGroupAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetEqpInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable EI_GetEqpInfo(string sEQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetEqpInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> EI_GetEqpInfoAsync(string sEQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetLotWaferMappingData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable EI_GetLotWaferMappingData(string sLotID, string sType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetLotWaferMappingData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> EI_GetLotWaferMappingDataAsync(string sLotID, string sType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetMarkingInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet EI_GetMarkingInformation(string CarrierID, string LotID, int iCallerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetMarkingInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> EI_GetMarkingInformationAsync(string CarrierID, string LotID, int iCallerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetMarkingInformation_CIS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EI_GetMarkingInformation_CIS(string CarrierID, string LotID, int iCallerType, string sMapPath, string sContentPath, string sEQPID, string sOPJOBID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetMarkingInformation_CIS", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EI_GetMarkingInformation_CISAsync(string CarrierID, string LotID, int iCallerType, string sMapPath, string sContentPath, string sEQPID, string sOPJOBID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetPackingInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet EI_GetPackingInformation(string CarrierID, string LotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetPackingInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> EI_GetPackingInformationAsync(string CarrierID, string LotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetPackingInformationEX", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataSet EI_GetPackingInformationEX(string CarrierID, string LotID, int iCallerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetPackingInformationEX", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataSet> EI_GetPackingInformationEXAsync(string CarrierID, string LotID, int iCallerType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetSlotMap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void EI_GetSlotMap(string sCarrierID, string sSlotMap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetSlotMap", ReplyAction="*")]
        System.Threading.Tasks.Task EI_GetSlotMapAsync(string sCarrierID, string sSlotMap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetSourceLotFOSBID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EI_GetSourceLotFOSBID(string CustomerLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetSourceLotFOSBID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EI_GetSourceLotFOSBIDAsync(string CustomerLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetWaferLotFOSBID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EI_GetWaferLotFOSBID(string WaferLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetWaferLotFOSBID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EI_GetWaferLotFOSBIDAsync(string WaferLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetWaferMappingDefectSummaryTable", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable EI_GetWaferMappingDefectSummaryTable();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_GetWaferMappingDefectSummaryTable", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> EI_GetWaferMappingDefectSummaryTableAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_QueryLotInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable EI_QueryLotInfo(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_QueryLotInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> EI_QueryLotInfoAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_UpdateReticeLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EI_UpdateReticeLocation(string strReticleID, string strLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EI_UpdateReticeLocation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EI_UpdateReticeLocationAsync(string strReticleID, string strLocation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_CheckEMS_Tools_Utl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable EMS_CheckEMS_Tools_Utl(string strReportDate, string strShiftTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_CheckEMS_Tools_Utl", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> EMS_CheckEMS_Tools_UtlAsync(string strReportDate, string strShiftTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_GetEntityLocation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EMS_GetEntityLocation(string sEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_GetEntityLocation", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EMS_GetEntityLocationAsync(string sEntity);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_GetReticleListByEQPID", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string EMS_GetReticleListByEQPID(string sEQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_GetReticleListByEQPID", ReplyAction="*")]
        System.Threading.Tasks.Task<string> EMS_GetReticleListByEQPIDAsync(string sEQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_IsToolInTQCList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EMS_IsToolInTQCList(string sEQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_IsToolInTQCList", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> EMS_IsToolInTQCListAsync(string sEQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_IsTQCEQPState", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool EMS_IsTQCEQPState(string sEQPID, string sEventName, string sSubState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_IsTQCEQPState", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> EMS_IsTQCEQPStateAsync(string sEQPID, string sEventName, string sSubState);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_UpdateEMS_Tools_Utl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void EMS_UpdateEMS_Tools_Utl(string strReportDate, string strShiftTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_UpdateEMS_Tools_Utl", ReplyAction="*")]
        System.Threading.Tasks.Task EMS_UpdateEMS_Tools_UtlAsync(string strReportDate, string strShiftTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_UpdateEMS_Tools_Utl_STDMonitor", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void EMS_UpdateEMS_Tools_Utl_STDMonitor(string strEQPID, string strSTDMonitorTime, string strReportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_UpdateEMS_Tools_Utl_STDMonitor", ReplyAction="*")]
        System.Threading.Tasks.Task EMS_UpdateEMS_Tools_Utl_STDMonitorAsync(string strEQPID, string strSTDMonitorTime, string strReportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_UpdateEMS_Tools_Utl_STDPM", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void EMS_UpdateEMS_Tools_Utl_STDPM(string strEQPID, string strSTDPMTime, string strReportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/EMS_UpdateEMS_Tools_Utl_STDPM", ReplyAction="*")]
        System.Threading.Tasks.Task EMS_UpdateEMS_Tools_Utl_STDPMAsync(string strEQPID, string strSTDPMTime, string strReportDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Entity_QueryPortInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Entity_QueryPortInfo(string EQP_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Entity_QueryPortInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Entity_QueryPortInfoAsync(string EQP_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Entity_QuerySchedulesEx", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable Entity_QuerySchedulesEx(System.DateTime strStartDate, System.DateTime strEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Entity_QuerySchedulesEx", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> Entity_QuerySchedulesExAsync(System.DateTime strStartDate, System.DateTime strEndDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/FB_getFlowBlockTreeFromRDB", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable FB_getFlowBlockTreeFromRDB(string strFlowBlockNS, string strFlowBlockID, int iFlowBlockVer, int iFlowBlockLevelNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/FB_getFlowBlockTreeFromRDB", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> FB_getFlowBlockTreeFromRDBAsync(string strFlowBlockNS, string strFlowBlockID, int iFlowBlockVer, int iFlowBlockLevelNum);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/FB_GetProdFlowBlock", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable FB_GetProdFlowBlock(string productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/FB_GetProdFlowBlock", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> FB_GetProdFlowBlockAsync(string productID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/GetOpJobIdGC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string GetOpJobIdGC(string strOPJOBID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/GetOpJobIdGC", ReplyAction="*")]
        System.Threading.Tasks.Task<string> GetOpJobIdGCAsync(string strOPJOBID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/GetSourceProdIDList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable GetSourceProdIDList(string strLotid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/GetSourceProdIDList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> GetSourceProdIDListAsync(string strLotid);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/getToolEDCData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable getToolEDCData(int iPageIndex, string strDep, string strMachineCode, string strStartDate, string strEndDate, bool isAllPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/getToolEDCData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> getToolEDCDataAsync(int iPageIndex, string strDep, string strMachineCode, string strStartDate, string strEndDate, bool isAllPass);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/HelloWorld", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string HelloWorld();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/HelloWorld", ReplyAction="*")]
        System.Threading.Tasks.Task<string> HelloWorldAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/JIG_UpdateUsageCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string JIG_UpdateUsageCount(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, string strAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/JIG_UpdateUsageCount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> JIG_UpdateUsageCountAsync(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, string strAction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_AdjustLot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_AdjustLot(string sLotID, string[] udaName, string[] udaValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_AdjustLot", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_AdjustLotAsync(string sLotID, string[] udaName, string[] udaValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_AdjustLotPriority", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_AdjustLotPriority(System.Data.DataTable dtLotPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_AdjustLotPriority", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_AdjustLotPriorityAsync(System.Data.DataTable dtLotPriority);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CancelSamplingSizeCtrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_CancelSamplingSizeCtrl(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CancelSamplingSizeCtrl", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_CancelSamplingSizeCtrlAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CancelSamplingSizeForMultiCtrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_CancelSamplingSizeForMultiCtrl(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CancelSamplingSizeForMultiCtrl", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_CancelSamplingSizeForMultiCtrlAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CheckDieTypeSettingForSPC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_CheckDieTypeSettingForSPC(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CheckDieTypeSettingForSPC", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_CheckDieTypeSettingForSPCAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CheckMapData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_CheckMapData(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CheckMapData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_CheckMapDataAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_Check_ActionList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_Check_ActionList(string strLotID, string strActionName, string strMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_Check_ActionList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_Check_ActionListAsync(string strLotID, string strActionName, string strMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChgSourceLotSlotMapAfterLotWaferStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ChgSourceLotSlotMapAfterLotWaferStart(string sEQPID, string sFOSB, string sNewSlotMap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChgSourceLotSlotMapAfterLotWaferStart", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ChgSourceLotSlotMapAfterLotWaferStartAsync(string sEQPID, string sFOSB, string sNewSlotMap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkCPdata", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LOT_ChkCPdata(string sSourceLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkCPdata", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LOT_ChkCPdataAsync(string sSourceLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkInResetMapData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ChkInResetMapData(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkInResetMapData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ChkInResetMapDataAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkIR", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_ChkIR(string sSourceLotID, string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkIR", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_ChkIRAsync(string sSourceLotID, string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkMultiLotInOneCarrier", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_ChkMultiLotInOneCarrier(string[] sLeft, string[] sRight, string sType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkMultiLotInOneCarrier", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_ChkMultiLotInOneCarrierAsync(string[] sLeft, string[] sRight, string sType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkOriginalQty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ChkOriginalQty(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkOriginalQty", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ChkOriginalQtyAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkReserveMsg", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LOT_ChkReserveMsg(string[] sList, string sPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkReserveMsg", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LOT_ChkReserveMsgAsync(string[] sList, string sPurpose);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkShip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_ChkShip(string sLotID, string sEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkShip", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_ChkShipAsync(string sLotID, string sEvent);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkUpdateSourceLotMap", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ChkUpdateSourceLotMap(string sEQPID, string sFOSB, string sNewSlotMap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkUpdateSourceLotMap", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ChkUpdateSourceLotMapAsync(string sEQPID, string sFOSB, string sNewSlotMap);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkWaferStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_ChkWaferStart(string sSourceLotID, string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkWaferStart", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_ChkWaferStartAsync(string sSourceLotID, string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkWaitingLotData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_ChkWaitingLotData(string[] sList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ChkWaitingLotData", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_ChkWaitingLotDataAsync(string[] sList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CreateLot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_CreateLot(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CreateLot", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_CreateLotAsync(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CreateSourceLotExternal", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_CreateSourceLotExternal(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_CreateSourceLotExternal", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_CreateSourceLotExternalAsync(System.Data.DataTable dt);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ExternalSystemPreCheck", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ExternalSystemPreCheck(string strAction, string[] strParaValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ExternalSystemPreCheck", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ExternalSystemPreCheckAsync(string strAction, string[] strParaValue);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetCPdata", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetCPdata(string sCustLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetCPdata", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetCPdataAsync(string sCustLot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetCurrentWIP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetCurrentWIP(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetCurrentWIP", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetCurrentWIPAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetCustomerReferenceInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetCustomerReferenceInfo(string sLotID, string strCustRefTPL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetCustomerReferenceInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetCustomerReferenceInfoAsync(string sLotID, string strCustRefTPL);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetInputSequence", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetInputSequence(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetInputSequence", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetInputSequenceAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetMarkingInformation", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetMarkingInformation(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetMarkingInformation", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetMarkingInformationAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetNewCustomerLotForShip", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetNewCustomerLotForShip(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetNewCustomerLotForShip", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetNewCustomerLotForShipAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetNewSlotList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetNewSlotList(string sSlotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetNewSlotList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetNewSlotListAsync(string sSlotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetPackageQty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetPackageQty(string sProductID, string sPackageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetPackageQty", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetPackageQtyAsync(string sProductID, string sPackageType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetPickingListToSAP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetPickingListToSAP(string strPickingNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetPickingListToSAP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetPickingListToSAPAsync(string strPickingNo);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetPlanLots", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetPlanLots(string startTime, string endTime, string wildcard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetPlanLots", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetPlanLotsAsync(string startTime, string endTime, string wildcard);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProdDesc", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetProdDesc(string sLotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProdDesc", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetProdDescAsync(string sLotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProdGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetProdGroup(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProdGroup", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetProdGroupAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProductDetail", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetProductDetail(string productName, int productVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProductDetail", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetProductDetailAsync(string productName, int productVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProductLists", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetProductLists(string filter, string productID, string productGroupID, int isCurrentVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetProductLists", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetProductListsAsync(string filter, string productID, string productGroupID, int isCurrentVersion);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Lot_GetRemindingCycleTm", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string Lot_GetRemindingCycleTm(int iLotPriority, string strProductID, string strChildGC, string strReworkGC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/Lot_GetRemindingCycleTm", ReplyAction="*")]
        System.Threading.Tasks.Task<string> Lot_GetRemindingCycleTmAsync(int iLotPriority, string strProductID, string strChildGC, string strReworkGC);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSorterReservedLots", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetSorterReservedLots(string EQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSorterReservedLots", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSorterReservedLotsAsync(string EQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSorterWaitingLots", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetSorterWaitingLots(string EQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSorterWaitingLots", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSorterWaitingLotsAsync(string EQPID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSourceLotInfo", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetSourceLotInfo(string sSourceLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSourceLotInfo", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSourceLotInfoAsync(string sSourceLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSpecificData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetSpecificData(string[] sLotList, string sType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetSpecificData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSpecificDataAsync(string[] sLotList, string sType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetTraceCodeForACSTSC", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetTraceCodeForACSTSC(string strNamespace, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetTraceCodeForACSTSC", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetTraceCodeForACSTSCAsync(string strNamespace, string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferBankList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetWaferBankList(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string strSortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferBankList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetWaferBankListAsync(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string strSortName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferStartCarrierCategoryByLot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_GetWaferStartCarrierCategoryByLot(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferStartCarrierCategoryByLot", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_GetWaferStartCarrierCategoryByLotAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferStartCarrierGroup", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetWaferStartCarrierGroup(string sOperation, string sProductGroup, string sProductID, string sLotType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferStartCarrierGroup", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetWaferStartCarrierGroupAsync(string sOperation, string sProductGroup, string sProductID, string sLotType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferStartData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_GetWaferStartData(string sDate1, string sDate2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_GetWaferStartData", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetWaferStartDataAsync(string sDate1, string sDate2);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_InsertOptionMapData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_InsertOptionMapData(string strLotid, string strSlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_InsertOptionMapData", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_InsertOptionMapDataAsync(string strLotid, string strSlot);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_LoadSubPanelCarrierList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable LOT_LoadSubPanelCarrierList(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_LoadSubPanelCarrierList", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> LOT_LoadSubPanelCarrierListAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_MergeBypassIdle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LOT_MergeBypassIdle(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_MergeBypassIdle", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LOT_MergeBypassIdleAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_OneEntityAdjustment", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_OneEntityAdjustment(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_OneEntityAdjustment", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_OneEntityAdjustmentAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_PackageLotCheckQtyUpdateUda", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_PackageLotCheckQtyUpdateUda(string strLotID, string strRoute, string strLayer, string strStage, string strOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_PackageLotCheckQtyUpdateUda", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_PackageLotCheckQtyUpdateUdaAsync(string strLotID, string strRoute, string strLayer, string strStage, string strOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_QueryLogicalRecipeByEQP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_QueryLogicalRecipeByEQP(string EQP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_QueryLogicalRecipeByEQP", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_QueryLogicalRecipeByEQPAsync(string EQP);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ReleaseProductionOrder", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_ReleaseProductionOrder(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ReleaseProductionOrder", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_ReleaseProductionOrderAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ReleaseProductionOrder2", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ReleaseProductionOrder2(string sPlant, string sSEQNO, string sITEMNO, string sAUFNR, string sTYPE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ReleaseProductionOrder2", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ReleaseProductionOrder2Async(string sPlant, string sSEQNO, string sITEMNO, string sAUFNR, string sTYPE);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeCtrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_SamplingSizeCtrl(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeCtrl", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_SamplingSizeCtrlAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeCtrlResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_SamplingSizeCtrlResult(string sLotID, string sResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeCtrlResult", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_SamplingSizeCtrlResultAsync(string sLotID, string sResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeCtrlSkipOpration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LOT_SamplingSizeCtrlSkipOpration(string sLotID, string sOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeCtrlSkipOpration", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LOT_SamplingSizeCtrlSkipOprationAsync(string sLotID, string sOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeForMultiCtrl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_SamplingSizeForMultiCtrl(string sAction, string sLotID, string sCurrSPCResult, string sGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeForMultiCtrl", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_SamplingSizeForMultiCtrlAsync(string sAction, string sLotID, string sCurrSPCResult, string sGroup);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeForMultiCtrlResult", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_SamplingSizeForMultiCtrlResult(string sGroup, string sLotID, string sResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeForMultiCtrlResult", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_SamplingSizeForMultiCtrlResultAsync(string sGroup, string sLotID, string sResult);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeForMultiCtrlSkipOpration", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        bool LOT_SamplingSizeForMultiCtrlSkipOpration(string sLotID, string sOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_SamplingSizeForMultiCtrlSkipOpration", ReplyAction="*")]
        System.Threading.Tasks.Task<bool> LOT_SamplingSizeForMultiCtrlSkipOprationAsync(string sLotID, string sOperation);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ShippingToDieBank", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ShippingToDieBank(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ShippingToDieBank", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ShippingToDieBankAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ShippingToWarehouse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_ShippingToWarehouse(string sLotID, string sFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_ShippingToWarehouse", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_ShippingToWarehouseAsync(string sLotID, string sFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_UnShippingFromDieBank", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_UnShippingFromDieBank(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_UnShippingFromDieBank", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_UnShippingFromDieBankAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_UnShippingFromWarehouse", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string LOT_UnShippingFromWarehouse(string sLotID, string sFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_UnShippingFromWarehouse", ReplyAction="*")]
        System.Threading.Tasks.Task<string> LOT_UnShippingFromWarehouseAsync(string sLotID, string sFunction);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_UpdataMappingData", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_UpdataMappingData(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_UpdataMappingData", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_UpdataMappingDataAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_Upd_BR_WorkOrderFlag", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_Upd_BR_WorkOrderFlag(string sLotID, string sFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_Upd_BR_WorkOrderFlag", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_Upd_BR_WorkOrderFlagAsync(string sLotID, string sFlag);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_WaferStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void LOT_WaferStart(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/LOT_WaferStart", ReplyAction="*")]
        System.Threading.Tasks.Task LOT_WaferStartAsync(string sLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailGroupList", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAIL_GetNoticeMailGroupList(string strProgramID, string strGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailGroupList", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAIL_GetNoticeMailGroupListAsync(string strProgramID, string strGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailGroupList_withArea", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAIL_GetNoticeMailGroupList_withArea(string strProgramID, string strGroupID, string strArea, string strPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailGroupList_withArea", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAIL_GetNoticeMailGroupList_withAreaAsync(string strProgramID, string strGroupID, string strArea, string strPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailTitle", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAIL_GetNoticeMailTitle(string strProgramID, string strGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailTitle", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAIL_GetNoticeMailTitleAsync(string strProgramID, string strGroupID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailTitle_withArea", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAIL_GetNoticeMailTitle_withArea(string strProgramID, string strGroupID, string strArea, string strPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAIL_GetNoticeMailTitle_withArea", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAIL_GetNoticeMailTitle_withAreaAsync(string strProgramID, string strGroupID, string strArea, string strPlant);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCheckSum", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAP_GetCheckSum(string sWaferID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCheckSum", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAP_GetCheckSumAsync(string sWaferID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCustomerDeviceForShipbySubPanelLot", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAP_GetCustomerDeviceForShipbySubPanelLot(string strSubPanelLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCustomerDeviceForShipbySubPanelLot", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAP_GetCustomerDeviceForShipbySubPanelLotAsync(string strSubPanelLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCustomerLotListbyMatl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAP_GetCustomerLotListbyMatl(string sLotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCustomerLotListbyMatl", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAP_GetCustomerLotListbyMatlAsync(string sLotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCustomerLotListbySubMatl", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAP_GetCustomerLotListbySubMatl(string sLotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetCustomerLotListbySubMatl", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAP_GetCustomerLotListbySubMatlAsync(string sLotList);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetPassFailQty", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MAP_GetPassFailQty(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MAP_GetPassFailQty", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MAP_GetPassFailQtyAsync(string strLotID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_Check_Tool", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MCS_Check_Tool(string EQP_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_Check_Tool", ReplyAction="*")]
        System.Threading.Tasks.Task MCS_Check_ToolAsync(string EQP_ID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_LABEL_PRINT_RECORD", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MCS_LABEL_PRINT_RECORD(string MCS_LB_NO, string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_LABEL_PRINT_RECORD", ReplyAction="*")]
        System.Threading.Tasks.Task MCS_LABEL_PRINT_RECORDAsync(string MCS_LB_NO, string sUserID);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_LABEL_QUERY_DETAIL", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable MCS_LABEL_QUERY_DETAIL(string MCS_LB_NO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_LABEL_QUERY_DETAIL", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> MCS_LABEL_QUERY_DETAILAsync(string MCS_LB_NO);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_LABEL_QUERY_LIST", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable MCS_LABEL_QUERY_LIST();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_LABEL_QUERY_LIST", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> MCS_LABEL_QUERY_LISTAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_WS", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MCS_WS(string sType, string[] sArgv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MCS_WS", ReplyAction="*")]
        System.Threading.Tasks.Task MCS_WSAsync(string sType, string[] sArgv);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MMS_CancelWaferStart", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MMS_CancelWaferStart(string strPART_NO, int iQty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MMS_CancelWaferStart", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MMS_CancelWaferStartAsync(string strPART_NO, int iQty);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MMS_GLASS_UpdateCountRecord", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        void MMS_GLASS_UpdateCountRecord();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MMS_GLASS_UpdateCountRecord", ReplyAction="*")]
        System.Threading.Tasks.Task MMS_GLASS_UpdateCountRecordAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MMS_UpdateGlassUsageCount", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        string MMS_UpdateGlassUsageCount(string sUserID, string sLotID, string strWaferScribeID, string strMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/MMS_UpdateGlassUsageCount", ReplyAction="*")]
        System.Threading.Tasks.Task<string> MMS_UpdateGlassUsageCountAsync(string sUserID, string sLotID, string strWaferScribeID, string strMode);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/NPW_GetTQP", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Data.DataTable NPW_GetTQP(string sEQPID, string sSrcProd);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://www.pti.com/WLP/NPW_GetTQP", ReplyAction="*")]
        System.Threading.Tasks.Task<System.Data.DataTable> NPW_GetTQPAsync(string sEQPID, string sSrcProd);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ExecuteWLPServiceSoapChannel : com.mirle.ibg3k0.sc.EqServiceReference.ExecuteWLPServiceSoap, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ExecuteWLPServiceSoapClient : System.ServiceModel.ClientBase<com.mirle.ibg3k0.sc.EqServiceReference.ExecuteWLPServiceSoap>, com.mirle.ibg3k0.sc.EqServiceReference.ExecuteWLPServiceSoap {
        
        public ExecuteWLPServiceSoapClient() {
        }
        
        public ExecuteWLPServiceSoapClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public ExecuteWLPServiceSoapClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecuteWLPServiceSoapClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public ExecuteWLPServiceSoapClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string OCAP_CheckOCAPAllowTrackOut(string strLotID) {
            return base.Channel.OCAP_CheckOCAPAllowTrackOut(strLotID);
        }
        
        public System.Threading.Tasks.Task<string> OCAP_CheckOCAPAllowTrackOutAsync(string strLotID) {
            return base.Channel.OCAP_CheckOCAPAllowTrackOutAsync(strLotID);
        }
        
        public string OCAP_Issue_OCAPForm(string strLotID, string strStage, string strOperation, string strEQPID, string strCollection_Plan, string strTemplateID, string strSampleID) {
            return base.Channel.OCAP_Issue_OCAPForm(strLotID, strStage, strOperation, strEQPID, strCollection_Plan, strTemplateID, strSampleID);
        }
        
        public System.Threading.Tasks.Task<string> OCAP_Issue_OCAPFormAsync(string strLotID, string strStage, string strOperation, string strEQPID, string strCollection_Plan, string strTemplateID, string strSampleID) {
            return base.Channel.OCAP_Issue_OCAPFormAsync(strLotID, strStage, strOperation, strEQPID, strCollection_Plan, strTemplateID, strSampleID);
        }
        
        public string PLM_GetProcessPlanObj(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber) {
            return base.Channel.PLM_GetProcessPlanObj(Namespace, FlowBlockName, FlowBlockVersion, FlowBlockLevelNumber);
        }
        
        public System.Threading.Tasks.Task<string> PLM_GetProcessPlanObjAsync(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber) {
            return base.Channel.PLM_GetProcessPlanObjAsync(Namespace, FlowBlockName, FlowBlockVersion, FlowBlockLevelNumber);
        }
        
        public string PLM_GetProcessTM(string Namespace, string ProductID, int ProductVersion, string RouteName, int RouteVersion, string SAPOperationType) {
            return base.Channel.PLM_GetProcessTM(Namespace, ProductID, ProductVersion, RouteName, RouteVersion, SAPOperationType);
        }
        
        public System.Threading.Tasks.Task<string> PLM_GetProcessTMAsync(string Namespace, string ProductID, int ProductVersion, string RouteName, int RouteVersion, string SAPOperationType) {
            return base.Channel.PLM_GetProcessTMAsync(Namespace, ProductID, ProductVersion, RouteName, RouteVersion, SAPOperationType);
        }
        
        public string PLM_SetProcessStatus(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber, int ActionCode) {
            return base.Channel.PLM_SetProcessStatus(Namespace, FlowBlockName, FlowBlockVersion, FlowBlockLevelNumber, ActionCode);
        }
        
        public System.Threading.Tasks.Task<string> PLM_SetProcessStatusAsync(string Namespace, string FlowBlockName, int FlowBlockVersion, int FlowBlockLevelNumber, int ActionCode) {
            return base.Channel.PLM_SetProcessStatusAsync(Namespace, FlowBlockName, FlowBlockVersion, FlowBlockLevelNumber, ActionCode);
        }
        
        public System.Data.DataTable PM_QueryHistory(string strStartDate, string strEndDate, string strEQP) {
            return base.Channel.PM_QueryHistory(strStartDate, strEndDate, strEQP);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> PM_QueryHistoryAsync(string strStartDate, string strEndDate, string strEQP) {
            return base.Channel.PM_QueryHistoryAsync(strStartDate, strEndDate, strEQP);
        }
        
        public string PROD_CheckCorrelationByLotID(string strSourceLotID, string strLotID) {
            return base.Channel.PROD_CheckCorrelationByLotID(strSourceLotID, strLotID);
        }
        
        public System.Threading.Tasks.Task<string> PROD_CheckCorrelationByLotIDAsync(string strSourceLotID, string strLotID) {
            return base.Channel.PROD_CheckCorrelationByLotIDAsync(strSourceLotID, strLotID);
        }
        
        public string PROD_CheckReferenceInformation(string strSourceLotID, string strLotID) {
            return base.Channel.PROD_CheckReferenceInformation(strSourceLotID, strLotID);
        }
        
        public System.Threading.Tasks.Task<string> PROD_CheckReferenceInformationAsync(string strSourceLotID, string strLotID) {
            return base.Channel.PROD_CheckReferenceInformationAsync(strSourceLotID, strLotID);
        }
        
        public string PROD_CreateCorrelationAndSAPPartNoFromPLM(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant, string strOPType, string strSAPPart, string strUserID) {
            return base.Channel.PROD_CreateCorrelationAndSAPPartNoFromPLM(strPMD, strCustomerID, strCustomerDevice, strPlant, strOPType, strSAPPart, strUserID);
        }
        
        public System.Threading.Tasks.Task<string> PROD_CreateCorrelationAndSAPPartNoFromPLMAsync(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant, string strOPType, string strSAPPart, string strUserID) {
            return base.Channel.PROD_CreateCorrelationAndSAPPartNoFromPLMAsync(strPMD, strCustomerID, strCustomerDevice, strPlant, strOPType, strSAPPart, strUserID);
        }
        
        public string PROD_CreateCorrelationInfoFromPLM(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant) {
            return base.Channel.PROD_CreateCorrelationInfoFromPLM(strPMD, strCustomerID, strCustomerDevice, strPlant);
        }
        
        public System.Threading.Tasks.Task<string> PROD_CreateCorrelationInfoFromPLMAsync(string strPMD, string strCustomerID, string strCustomerDevice, string strPlant) {
            return base.Channel.PROD_CreateCorrelationInfoFromPLMAsync(strPMD, strCustomerID, strCustomerDevice, strPlant);
        }
        
        public System.Data.DataSet PROD_GetProcessPlanCertificationEX1(string strLotID, string strProdNS, string strProdID, int iProdVer) {
            return base.Channel.PROD_GetProcessPlanCertificationEX1(strLotID, strProdNS, strProdID, iProdVer);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> PROD_GetProcessPlanCertificationEX1Async(string strLotID, string strProdNS, string strProdID, int iProdVer) {
            return base.Channel.PROD_GetProcessPlanCertificationEX1Async(strLotID, strProdNS, strProdID, iProdVer);
        }
        
        public void PROD_syncProduct(string strProdNS, string[] strFilterName, string[] strFilterValue, string RPT_SrvName, string RPT_DbName) {
            base.Channel.PROD_syncProduct(strProdNS, strFilterName, strFilterValue, RPT_SrvName, RPT_DbName);
        }
        
        public System.Threading.Tasks.Task PROD_syncProductAsync(string strProdNS, string[] strFilterName, string[] strFilterValue, string RPT_SrvName, string RPT_DbName) {
            return base.Channel.PROD_syncProductAsync(strProdNS, strFilterName, strFilterValue, RPT_SrvName, RPT_DbName);
        }
        
        public System.Data.DataTable Report_CreateBRCM_RECON(string Namespace, string strCust) {
            return base.Channel.Report_CreateBRCM_RECON(Namespace, strCust);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_CreateBRCM_RECONAsync(string Namespace, string strCust) {
            return base.Channel.Report_CreateBRCM_RECONAsync(Namespace, strCust);
        }
        
        public System.Data.DataTable Report_CreateBRCM_WIPCF(string Namespace, string strCust) {
            return base.Channel.Report_CreateBRCM_WIPCF(Namespace, strCust);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_CreateBRCM_WIPCFAsync(string Namespace, string strCust) {
            return base.Channel.Report_CreateBRCM_WIPCFAsync(Namespace, strCust);
        }
        
        public string Report_CreateOQCShipReport(string strLotID, string strOutputPath, bool bInternal) {
            return base.Channel.Report_CreateOQCShipReport(strLotID, strOutputPath, bInternal);
        }
        
        public System.Threading.Tasks.Task<string> Report_CreateOQCShipReportAsync(string strLotID, string strOutputPath, bool bInternal) {
            return base.Channel.Report_CreateOQCShipReportAsync(strLotID, strOutputPath, bInternal);
        }
        
        public string Report_CreateOQCShipReportEX(string strLotID, string strOutputPath, bool bInternal) {
            return base.Channel.Report_CreateOQCShipReportEX(strLotID, strOutputPath, bInternal);
        }
        
        public System.Threading.Tasks.Task<string> Report_CreateOQCShipReportEXAsync(string strLotID, string strOutputPath, bool bInternal) {
            return base.Channel.Report_CreateOQCShipReportEXAsync(strLotID, strOutputPath, bInternal);
        }
        
        public System.Data.DataTable Report_Create_EntityUtilization(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate, string strSortColumn) {
            return base.Channel.Report_Create_EntityUtilization(iPageIndex, strFilterName, strFilterValue, strStartDate, strEndDate, strSortColumn);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_Create_EntityUtilizationAsync(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate, string strSortColumn) {
            return base.Channel.Report_Create_EntityUtilizationAsync(iPageIndex, strFilterName, strFilterValue, strStartDate, strEndDate, strSortColumn);
        }
        
        public System.Data.DataTable Report_Create_GetEntityHistory(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate) {
            return base.Channel.Report_Create_GetEntityHistory(iPageIndex, strFilterName, strFilterValue, strStartDate, strEndDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_Create_GetEntityHistoryAsync(int iPageIndex, string[] strFilterName, string[] strFilterValue, string strStartDate, string strEndDate) {
            return base.Channel.Report_Create_GetEntityHistoryAsync(iPageIndex, strFilterName, strFilterValue, strStartDate, strEndDate);
        }
        
        public System.Data.DataSet Report_EDCDataByLotAndStage(string strLotID, string strStage) {
            return base.Channel.Report_EDCDataByLotAndStage(strLotID, strStage);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> Report_EDCDataByLotAndStageAsync(string strLotID, string strStage) {
            return base.Channel.Report_EDCDataByLotAndStageAsync(strLotID, strStage);
        }
        
        public System.Data.DataTable Report_GetWIPList(int iPageIndex, string chkIgnore, string strLotStatus, string strProdPhase, string[] strFilterNames, string[] strFilterValues, string strOrderName) {
            return base.Channel.Report_GetWIPList(iPageIndex, chkIgnore, strLotStatus, strProdPhase, strFilterNames, strFilterValues, strOrderName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_GetWIPListAsync(int iPageIndex, string chkIgnore, string strLotStatus, string strProdPhase, string[] strFilterNames, string[] strFilterValues, string strOrderName) {
            return base.Channel.Report_GetWIPListAsync(iPageIndex, chkIgnore, strLotStatus, strProdPhase, strFilterNames, strFilterValues, strOrderName);
        }
        
        public System.Data.DataTable Report_Get_OCAP_List(int iPageIndex, int iPageSize, string[] strFilterNames, string[] strFilterValues, string IssueStartDate, string issueEndDate) {
            return base.Channel.Report_Get_OCAP_List(iPageIndex, iPageSize, strFilterNames, strFilterValues, IssueStartDate, issueEndDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_Get_OCAP_ListAsync(int iPageIndex, int iPageSize, string[] strFilterNames, string[] strFilterValues, string IssueStartDate, string issueEndDate) {
            return base.Channel.Report_Get_OCAP_ListAsync(iPageIndex, iPageSize, strFilterNames, strFilterValues, IssueStartDate, issueEndDate);
        }
        
        public System.Data.DataTable Report_Get_WIPHoldLot(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string chkIgnore, string vsSorterName) {
            return base.Channel.Report_Get_WIPHoldLot(iPageIndex, iPageSize, strFilterName, strFilterValue, chkIgnore, vsSorterName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Report_Get_WIPHoldLotAsync(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string chkIgnore, string vsSorterName) {
            return base.Channel.Report_Get_WIPHoldLotAsync(iPageIndex, iPageSize, strFilterName, strFilterValue, chkIgnore, vsSorterName);
        }
        
        public string RTC_CheckState(string strNamespace, string strReticleID, string strLocation) {
            return base.Channel.RTC_CheckState(strNamespace, strReticleID, strLocation);
        }
        
        public System.Threading.Tasks.Task<string> RTC_CheckStateAsync(string strNamespace, string strReticleID, string strLocation) {
            return base.Channel.RTC_CheckStateAsync(strNamespace, strReticleID, strLocation);
        }
        
        public string RTC_UpdateUsageCountEx(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, int iShotCount) {
            return base.Channel.RTC_UpdateUsageCountEx(strNamespace, strRecipeObjectID, strToolsID, iWaferQty, iShotCount);
        }
        
        public System.Threading.Tasks.Task<string> RTC_UpdateUsageCountExAsync(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, int iShotCount) {
            return base.Channel.RTC_UpdateUsageCountExAsync(strNamespace, strRecipeObjectID, strToolsID, iWaferQty, iShotCount);
        }
        
        public string Runcard_Check_DieLot(string LotID) {
            return base.Channel.Runcard_Check_DieLot(LotID);
        }
        
        public System.Threading.Tasks.Task<string> Runcard_Check_DieLotAsync(string LotID) {
            return base.Channel.Runcard_Check_DieLotAsync(LotID);
        }
        
        public System.Data.DataTable Runcard_GetData(string strLotID) {
            return base.Channel.Runcard_GetData(strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Runcard_GetDataAsync(string strLotID) {
            return base.Channel.Runcard_GetDataAsync(strLotID);
        }
        
        public System.Data.DataTable Runcard_GetEntry_Row_ID(string strLotID) {
            return base.Channel.Runcard_GetEntry_Row_ID(strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Runcard_GetEntry_Row_IDAsync(string strLotID) {
            return base.Channel.Runcard_GetEntry_Row_IDAsync(strLotID);
        }
        
        public System.Data.DataTable Runcard_GetStageData(string strLotID) {
            return base.Channel.Runcard_GetStageData(strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Runcard_GetStageDataAsync(string strLotID) {
            return base.Channel.Runcard_GetStageDataAsync(strLotID);
        }
        
        public string Runcard_Get_Cnt(string LotID, int Qty) {
            return base.Channel.Runcard_Get_Cnt(LotID, Qty);
        }
        
        public System.Threading.Tasks.Task<string> Runcard_Get_CntAsync(string LotID, int Qty) {
            return base.Channel.Runcard_Get_CntAsync(LotID, Qty);
        }
        
        public void Runcard_InsertLog(string strMsg, string RemoteIP, string Lot, string RUNID) {
            base.Channel.Runcard_InsertLog(strMsg, RemoteIP, Lot, RUNID);
        }
        
        public System.Threading.Tasks.Task Runcard_InsertLogAsync(string strMsg, string RemoteIP, string Lot, string RUNID) {
            return base.Channel.Runcard_InsertLogAsync(strMsg, RemoteIP, Lot, RUNID);
        }
        
        public bool RunCard_IsLastRunCardForTnR(string sLotID) {
            return base.Channel.RunCard_IsLastRunCardForTnR(sLotID);
        }
        
        public System.Threading.Tasks.Task<bool> RunCard_IsLastRunCardForTnRAsync(string sLotID) {
            return base.Channel.RunCard_IsLastRunCardForTnRAsync(sLotID);
        }
        
        public void Runcard_log(string strAction, string T_ilot) {
            base.Channel.Runcard_log(strAction, T_ilot);
        }
        
        public System.Threading.Tasks.Task Runcard_logAsync(string strAction, string T_ilot) {
            return base.Channel.Runcard_logAsync(strAction, T_ilot);
        }
        
        public string Runcard_Release_Hold(string LotID, string RUNID) {
            return base.Channel.Runcard_Release_Hold(LotID, RUNID);
        }
        
        public System.Threading.Tasks.Task<string> Runcard_Release_HoldAsync(string LotID, string RUNID) {
            return base.Channel.Runcard_Release_HoldAsync(LotID, RUNID);
        }
        
        public string SAP_ChkMAPInfo(string strCustID, string strCustomerLot) {
            return base.Channel.SAP_ChkMAPInfo(strCustID, strCustomerLot);
        }
        
        public System.Threading.Tasks.Task<string> SAP_ChkMAPInfoAsync(string strCustID, string strCustomerLot) {
            return base.Channel.SAP_ChkMAPInfoAsync(strCustID, strCustomerLot);
        }
        
        public void SG_WorkOrder_CreateWorkOrderInfo(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom) {
            base.Channel.SG_WorkOrder_CreateWorkOrderInfo(sFunctionCode, sProcessType, sUser, dtWLPWO, IsSubCom);
        }
        
        public System.Threading.Tasks.Task SG_WorkOrder_CreateWorkOrderInfoAsync(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom) {
            return base.Channel.SG_WorkOrder_CreateWorkOrderInfoAsync(sFunctionCode, sProcessType, sUser, dtWLPWO, IsSubCom);
        }
        
        public void TCS_TransferDATA_ToTCS(string strNamespace, string strMailGroup, string strFunName) {
            base.Channel.TCS_TransferDATA_ToTCS(strNamespace, strMailGroup, strFunName);
        }
        
        public System.Threading.Tasks.Task TCS_TransferDATA_ToTCSAsync(string strNamespace, string strMailGroup, string strFunName) {
            return base.Channel.TCS_TransferDATA_ToTCSAsync(strNamespace, strMailGroup, strFunName);
        }
        
        public System.Data.DataTable WIP_UpdateForSAPProductionOrderForCK(string strNamespace, string strLotID) {
            return base.Channel.WIP_UpdateForSAPProductionOrderForCK(strNamespace, strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> WIP_UpdateForSAPProductionOrderForCKAsync(string strNamespace, string strLotID) {
            return base.Channel.WIP_UpdateForSAPProductionOrderForCKAsync(strNamespace, strLotID);
        }
        
        public string WIP_UpdateWaferProcessValidationForRework(string strAction, string strLotID, string strMaterialID, string strRW_RouteID) {
            return base.Channel.WIP_UpdateWaferProcessValidationForRework(strAction, strLotID, strMaterialID, strRW_RouteID);
        }
        
        public System.Threading.Tasks.Task<string> WIP_UpdateWaferProcessValidationForReworkAsync(string strAction, string strLotID, string strMaterialID, string strRW_RouteID) {
            return base.Channel.WIP_UpdateWaferProcessValidationForReworkAsync(strAction, strLotID, strMaterialID, strRW_RouteID);
        }
        
        public string WLP_ExecuteAPIs(string Request) {
            return base.Channel.WLP_ExecuteAPIs(Request);
        }
        
        public System.Threading.Tasks.Task<string> WLP_ExecuteAPIsAsync(string Request) {
            return base.Channel.WLP_ExecuteAPIsAsync(Request);
        }
        
        public string WLP_ExecuteAPIsForClient(string vsFunctionName, string vsInputValue) {
            return base.Channel.WLP_ExecuteAPIsForClient(vsFunctionName, vsInputValue);
        }
        
        public System.Threading.Tasks.Task<string> WLP_ExecuteAPIsForClientAsync(string vsFunctionName, string vsInputValue) {
            return base.Channel.WLP_ExecuteAPIsForClientAsync(vsFunctionName, vsInputValue);
        }
        
        public string WLP_ExecuteAPIsForPortCommand(string vsFunctionName, string vsInputValue) {
            return base.Channel.WLP_ExecuteAPIsForPortCommand(vsFunctionName, vsInputValue);
        }
        
        public System.Threading.Tasks.Task<string> WLP_ExecuteAPIsForPortCommandAsync(string vsFunctionName, string vsInputValue) {
            return base.Channel.WLP_ExecuteAPIsForPortCommandAsync(vsFunctionName, vsInputValue);
        }
        
        public void WorkOrder_CreateWorkOrderInfo(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom) {
            base.Channel.WorkOrder_CreateWorkOrderInfo(sFunctionCode, sProcessType, sUser, dtWLPWO, IsSubCom);
        }
        
        public System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfoAsync(string sFunctionCode, string sProcessType, string sUser, System.Data.DataTable dtWLPWO, bool IsSubCom) {
            return base.Channel.WorkOrder_CreateWorkOrderInfoAsync(sFunctionCode, sProcessType, sUser, dtWLPWO, IsSubCom);
        }
        
        public void WorkOrder_CreateWorkOrderInfo2(string sFunctionCode, string sProcessType, string sUser, string XML_WO, string IsSubCom) {
            base.Channel.WorkOrder_CreateWorkOrderInfo2(sFunctionCode, sProcessType, sUser, XML_WO, IsSubCom);
        }
        
        public System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfo2Async(string sFunctionCode, string sProcessType, string sUser, string XML_WO, string IsSubCom) {
            return base.Channel.WorkOrder_CreateWorkOrderInfo2Async(sFunctionCode, sProcessType, sUser, XML_WO, IsSubCom);
        }
        
        public void WorkOrder_CreateWorkOrderInfo3(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom) {
            base.Channel.WorkOrder_CreateWorkOrderInfo3(sFunctionCode, sProcessType, sCustID, sUserID, dt, dt1, IsSubCom);
        }
        
        public System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfo3Async(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom) {
            return base.Channel.WorkOrder_CreateWorkOrderInfo3Async(sFunctionCode, sProcessType, sCustID, sUserID, dt, dt1, IsSubCom);
        }
        
        public void WorkOrder_CreateWorkOrderInfo_NonCheckSAP(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom) {
            base.Channel.WorkOrder_CreateWorkOrderInfo_NonCheckSAP(sFunctionCode, sProcessType, sCustID, sUserID, dt, dt1, IsSubCom);
        }
        
        public System.Threading.Tasks.Task WorkOrder_CreateWorkOrderInfo_NonCheckSAPAsync(string sFunctionCode, string sProcessType, string sCustID, string sUserID, System.Data.DataTable dt, System.Data.DataTable dt1, bool IsSubCom) {
            return base.Channel.WorkOrder_CreateWorkOrderInfo_NonCheckSAPAsync(sFunctionCode, sProcessType, sCustID, sUserID, dt, dt1, IsSubCom);
        }
        
        public void WorkOrder_Delete_APMES_CP_WO(string sINTERNAL_WO) {
            base.Channel.WorkOrder_Delete_APMES_CP_WO(sINTERNAL_WO);
        }
        
        public System.Threading.Tasks.Task WorkOrder_Delete_APMES_CP_WOAsync(string sINTERNAL_WO) {
            return base.Channel.WorkOrder_Delete_APMES_CP_WOAsync(sINTERNAL_WO);
        }
        
        public string WorkOrder_Delete_CP_WO(string sINTERNAL_WO) {
            return base.Channel.WorkOrder_Delete_CP_WO(sINTERNAL_WO);
        }
        
        public System.Threading.Tasks.Task<string> WorkOrder_Delete_CP_WOAsync(string sINTERNAL_WO) {
            return base.Channel.WorkOrder_Delete_CP_WOAsync(sINTERNAL_WO);
        }
        
        public void WorkOrder_Load_BR_WO_TO_ZMM_X00_001(string sCustID, string sINTERNAL_WO, string sLotID) {
            base.Channel.WorkOrder_Load_BR_WO_TO_ZMM_X00_001(sCustID, sINTERNAL_WO, sLotID);
        }
        
        public System.Threading.Tasks.Task WorkOrder_Load_BR_WO_TO_ZMM_X00_001Async(string sCustID, string sINTERNAL_WO, string sLotID) {
            return base.Channel.WorkOrder_Load_BR_WO_TO_ZMM_X00_001Async(sCustID, sINTERNAL_WO, sLotID);
        }
        
        public System.Data.DataTable WorkOrder_Load_CP_WO(string sCustID, string sFunctionCode, string sUserID, System.Data.DataTable dt) {
            return base.Channel.WorkOrder_Load_CP_WO(sCustID, sFunctionCode, sUserID, dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> WorkOrder_Load_CP_WOAsync(string sCustID, string sFunctionCode, string sUserID, System.Data.DataTable dt) {
            return base.Channel.WorkOrder_Load_CP_WOAsync(sCustID, sFunctionCode, sUserID, dt);
        }
        
        public void WorkOrder_Load_Customer_Reference_Data(string sCustID, System.Data.DataTable dt) {
            base.Channel.WorkOrder_Load_Customer_Reference_Data(sCustID, dt);
        }
        
        public System.Threading.Tasks.Task WorkOrder_Load_Customer_Reference_DataAsync(string sCustID, System.Data.DataTable dt) {
            return base.Channel.WorkOrder_Load_Customer_Reference_DataAsync(sCustID, dt);
        }
        
        public System.Data.DataTable WorkOrder_SendDDPFile_ACSMSA(System.Data.DataTable dt) {
            return base.Channel.WorkOrder_SendDDPFile_ACSMSA(dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> WorkOrder_SendDDPFile_ACSMSAAsync(System.Data.DataTable dt) {
            return base.Channel.WorkOrder_SendDDPFile_ACSMSAAsync(dt);
        }
        
        public void WorkOrder_SendToCP(string sLotID, string sUserID) {
            base.Channel.WorkOrder_SendToCP(sLotID, sUserID);
        }
        
        public System.Threading.Tasks.Task WorkOrder_SendToCPAsync(string sLotID, string sUserID) {
            return base.Channel.WorkOrder_SendToCPAsync(sLotID, sUserID);
        }
        
        public void WorkOrder_SendToCP2(string sINTERNAL_WO) {
            base.Channel.WorkOrder_SendToCP2(sINTERNAL_WO);
        }
        
        public System.Threading.Tasks.Task WorkOrder_SendToCP2Async(string sINTERNAL_WO) {
            return base.Channel.WorkOrder_SendToCP2Async(sINTERNAL_WO);
        }
        
        public string WorkOrder_SendToCP3(string sLotID, string sUserID) {
            return base.Channel.WorkOrder_SendToCP3(sLotID, sUserID);
        }
        
        public System.Threading.Tasks.Task<string> WorkOrder_SendToCP3Async(string sLotID, string sUserID) {
            return base.Channel.WorkOrder_SendToCP3Async(sLotID, sUserID);
        }
        
        public void WorkOrder_Upd_BR_WorkOrderFlag(string sCustID, string sINTERNAL_WO, string sFromFlag, string sToFlag) {
            base.Channel.WorkOrder_Upd_BR_WorkOrderFlag(sCustID, sINTERNAL_WO, sFromFlag, sToFlag);
        }
        
        public System.Threading.Tasks.Task WorkOrder_Upd_BR_WorkOrderFlagAsync(string sCustID, string sINTERNAL_WO, string sFromFlag, string sToFlag) {
            return base.Channel.WorkOrder_Upd_BR_WorkOrderFlagAsync(sCustID, sINTERNAL_WO, sFromFlag, sToFlag);
        }
        
        public string WT_GetLotID(string sUserID) {
            return base.Channel.WT_GetLotID(sUserID);
        }
        
        public System.Threading.Tasks.Task<string> WT_GetLotIDAsync(string sUserID) {
            return base.Channel.WT_GetLotIDAsync(sUserID);
        }
        
        public string WT_QueryLotID(string Key1) {
            return base.Channel.WT_QueryLotID(Key1);
        }
        
        public System.Threading.Tasks.Task<string> WT_QueryLotIDAsync(string Key1) {
            return base.Channel.WT_QueryLotIDAsync(Key1);
        }
        
        public void CarrierChangeToForClean() {
            base.Channel.CarrierChangeToForClean();
        }
        
        public System.Threading.Tasks.Task CarrierChangeToForCleanAsync() {
            return base.Channel.CarrierChangeToForCleanAsync();
        }
        
        public string CAR_GetCarrierList(string location, string carrierType, string carrierState, string carrierID, int maxCount, string retToken, string locationType) {
            return base.Channel.CAR_GetCarrierList(location, carrierType, carrierState, carrierID, maxCount, retToken, locationType);
        }
        
        public System.Threading.Tasks.Task<string> CAR_GetCarrierListAsync(string location, string carrierType, string carrierState, string carrierID, int maxCount, string retToken, string locationType) {
            return base.Channel.CAR_GetCarrierListAsync(location, carrierType, carrierState, carrierID, maxCount, retToken, locationType);
        }
        
        public void CAR_UpdateLocation(System.Data.DataTable dt) {
            base.Channel.CAR_UpdateLocation(dt);
        }
        
        public System.Threading.Tasks.Task CAR_UpdateLocationAsync(System.Data.DataTable dt) {
            return base.Channel.CAR_UpdateLocationAsync(dt);
        }
        
        public void chkMapData(string sLotID) {
            base.Channel.chkMapData(sLotID);
        }
        
        public System.Threading.Tasks.Task chkMapDataAsync(string sLotID) {
            return base.Channel.chkMapDataAsync(sLotID);
        }
        
        public string CRM_AddEntry(string strRelationName, string[] strAttrName, string[] strAttrValue) {
            return base.Channel.CRM_AddEntry(strRelationName, strAttrName, strAttrValue);
        }
        
        public System.Threading.Tasks.Task<string> CRM_AddEntryAsync(string strRelationName, string[] strAttrName, string[] strAttrValue) {
            return base.Channel.CRM_AddEntryAsync(strRelationName, strAttrName, strAttrValue);
        }
        
        public void CRM_AddMultipleRelationEntries(string strRelationNS, string strRelationName, System.Data.DataTable dt) {
            base.Channel.CRM_AddMultipleRelationEntries(strRelationNS, strRelationName, dt);
        }
        
        public System.Threading.Tasks.Task CRM_AddMultipleRelationEntriesAsync(string strRelationNS, string strRelationName, System.Data.DataTable dt) {
            return base.Channel.CRM_AddMultipleRelationEntriesAsync(strRelationNS, strRelationName, dt);
        }
        
        public void CRM_DeleteMultipleRelationEntryLists(string strRelationNS, string strRelationName, System.Data.DataTable dt) {
            base.Channel.CRM_DeleteMultipleRelationEntryLists(strRelationNS, strRelationName, dt);
        }
        
        public System.Threading.Tasks.Task CRM_DeleteMultipleRelationEntryListsAsync(string strRelationNS, string strRelationName, System.Data.DataTable dt) {
            return base.Channel.CRM_DeleteMultipleRelationEntryListsAsync(strRelationNS, strRelationName, dt);
        }
        
        public System.Data.DataTable CRM_GetRelationEntryBySQL(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue) {
            return base.Channel.CRM_GetRelationEntryBySQL(strRelationNS, strRelationName, strFilterName, strFilterValue);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> CRM_GetRelationEntryBySQLAsync(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue) {
            return base.Channel.CRM_GetRelationEntryBySQLAsync(strRelationNS, strRelationName, strFilterName, strFilterValue);
        }
        
        public System.Data.DataTable CRM_GetRelationEntrySpecList(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue, string[] strAttributeName) {
            return base.Channel.CRM_GetRelationEntrySpecList(strRelationNS, strRelationName, strFilterName, strFilterValue, strAttributeName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> CRM_GetRelationEntrySpecListAsync(string strRelationNS, string strRelationName, string[] strFilterName, string[] strFilterValue, string[] strAttributeName) {
            return base.Channel.CRM_GetRelationEntrySpecListAsync(strRelationNS, strRelationName, strFilterName, strFilterValue, strAttributeName);
        }
        
        public string CRM_SAP_ProductMapping_AddEntry(string mmn01, string mmn02, string mmn03, string mmn04, string mmn05, string mmn06) {
            return base.Channel.CRM_SAP_ProductMapping_AddEntry(mmn01, mmn02, mmn03, mmn04, mmn05, mmn06);
        }
        
        public System.Threading.Tasks.Task<string> CRM_SAP_ProductMapping_AddEntryAsync(string mmn01, string mmn02, string mmn03, string mmn04, string mmn05, string mmn06) {
            return base.Channel.CRM_SAP_ProductMapping_AddEntryAsync(mmn01, mmn02, mmn03, mmn04, mmn05, mmn06);
        }
        
        public void CR_MTK_CreateBDRFFromTable(string Namespace, System.Data.DataTable dt_BDRF) {
            base.Channel.CR_MTK_CreateBDRFFromTable(Namespace, dt_BDRF);
        }
        
        public System.Threading.Tasks.Task CR_MTK_CreateBDRFFromTableAsync(string Namespace, System.Data.DataTable dt_BDRF) {
            return base.Channel.CR_MTK_CreateBDRFFromTableAsync(Namespace, dt_BDRF);
        }
        
        public System.Data.DataSet EDC_GetStageEDC(string strLotID, string strStage, string strOperation, string strBeginDate, string strEndDate) {
            return base.Channel.EDC_GetStageEDC(strLotID, strStage, strOperation, strBeginDate, strEndDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> EDC_GetStageEDCAsync(string strLotID, string strStage, string strOperation, string strBeginDate, string strEndDate) {
            return base.Channel.EDC_GetStageEDCAsync(strLotID, strStage, strOperation, strBeginDate, strEndDate);
        }
        
        public string EDC_SavePLP_SP_RAWDATA(string strLotID, string strXML) {
            return base.Channel.EDC_SavePLP_SP_RAWDATA(strLotID, strXML);
        }
        
        public System.Threading.Tasks.Task<string> EDC_SavePLP_SP_RAWDATAAsync(string strLotID, string strXML) {
            return base.Channel.EDC_SavePLP_SP_RAWDATAAsync(strLotID, strXML);
        }
        
        public System.Data.DataSet EI_GetBuleTapeInformation(string strCustomerLotID, int iCallerType) {
            return base.Channel.EI_GetBuleTapeInformation(strCustomerLotID, iCallerType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> EI_GetBuleTapeInformationAsync(string strCustomerLotID, int iCallerType) {
            return base.Channel.EI_GetBuleTapeInformationAsync(strCustomerLotID, iCallerType);
        }
        
        public System.Data.DataTable EI_GetCarrierGroup() {
            return base.Channel.EI_GetCarrierGroup();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> EI_GetCarrierGroupAsync() {
            return base.Channel.EI_GetCarrierGroupAsync();
        }
        
        public System.Data.DataTable EI_GetEqpInfo(string sEQPID) {
            return base.Channel.EI_GetEqpInfo(sEQPID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> EI_GetEqpInfoAsync(string sEQPID) {
            return base.Channel.EI_GetEqpInfoAsync(sEQPID);
        }
        
        public System.Data.DataTable EI_GetLotWaferMappingData(string sLotID, string sType) {
            return base.Channel.EI_GetLotWaferMappingData(sLotID, sType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> EI_GetLotWaferMappingDataAsync(string sLotID, string sType) {
            return base.Channel.EI_GetLotWaferMappingDataAsync(sLotID, sType);
        }
        
        public System.Data.DataSet EI_GetMarkingInformation(string CarrierID, string LotID, int iCallerType) {
            return base.Channel.EI_GetMarkingInformation(CarrierID, LotID, iCallerType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> EI_GetMarkingInformationAsync(string CarrierID, string LotID, int iCallerType) {
            return base.Channel.EI_GetMarkingInformationAsync(CarrierID, LotID, iCallerType);
        }
        
        public string EI_GetMarkingInformation_CIS(string CarrierID, string LotID, int iCallerType, string sMapPath, string sContentPath, string sEQPID, string sOPJOBID) {
            return base.Channel.EI_GetMarkingInformation_CIS(CarrierID, LotID, iCallerType, sMapPath, sContentPath, sEQPID, sOPJOBID);
        }
        
        public System.Threading.Tasks.Task<string> EI_GetMarkingInformation_CISAsync(string CarrierID, string LotID, int iCallerType, string sMapPath, string sContentPath, string sEQPID, string sOPJOBID) {
            return base.Channel.EI_GetMarkingInformation_CISAsync(CarrierID, LotID, iCallerType, sMapPath, sContentPath, sEQPID, sOPJOBID);
        }
        
        public System.Data.DataSet EI_GetPackingInformation(string CarrierID, string LotID) {
            return base.Channel.EI_GetPackingInformation(CarrierID, LotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> EI_GetPackingInformationAsync(string CarrierID, string LotID) {
            return base.Channel.EI_GetPackingInformationAsync(CarrierID, LotID);
        }
        
        public System.Data.DataSet EI_GetPackingInformationEX(string CarrierID, string LotID, int iCallerType) {
            return base.Channel.EI_GetPackingInformationEX(CarrierID, LotID, iCallerType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataSet> EI_GetPackingInformationEXAsync(string CarrierID, string LotID, int iCallerType) {
            return base.Channel.EI_GetPackingInformationEXAsync(CarrierID, LotID, iCallerType);
        }
        
        public void EI_GetSlotMap(string sCarrierID, string sSlotMap) {
            base.Channel.EI_GetSlotMap(sCarrierID, sSlotMap);
        }
        
        public System.Threading.Tasks.Task EI_GetSlotMapAsync(string sCarrierID, string sSlotMap) {
            return base.Channel.EI_GetSlotMapAsync(sCarrierID, sSlotMap);
        }
        
        public string EI_GetSourceLotFOSBID(string CustomerLotID) {
            return base.Channel.EI_GetSourceLotFOSBID(CustomerLotID);
        }
        
        public System.Threading.Tasks.Task<string> EI_GetSourceLotFOSBIDAsync(string CustomerLotID) {
            return base.Channel.EI_GetSourceLotFOSBIDAsync(CustomerLotID);
        }
        
        public string EI_GetWaferLotFOSBID(string WaferLotID) {
            return base.Channel.EI_GetWaferLotFOSBID(WaferLotID);
        }
        
        public System.Threading.Tasks.Task<string> EI_GetWaferLotFOSBIDAsync(string WaferLotID) {
            return base.Channel.EI_GetWaferLotFOSBIDAsync(WaferLotID);
        }
        
        public System.Data.DataTable EI_GetWaferMappingDefectSummaryTable() {
            return base.Channel.EI_GetWaferMappingDefectSummaryTable();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> EI_GetWaferMappingDefectSummaryTableAsync() {
            return base.Channel.EI_GetWaferMappingDefectSummaryTableAsync();
        }
        
        public System.Data.DataTable EI_QueryLotInfo(string sLotID) {
            return base.Channel.EI_QueryLotInfo(sLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> EI_QueryLotInfoAsync(string sLotID) {
            return base.Channel.EI_QueryLotInfoAsync(sLotID);
        }
        
        public string EI_UpdateReticeLocation(string strReticleID, string strLocation) {
            return base.Channel.EI_UpdateReticeLocation(strReticleID, strLocation);
        }
        
        public System.Threading.Tasks.Task<string> EI_UpdateReticeLocationAsync(string strReticleID, string strLocation) {
            return base.Channel.EI_UpdateReticeLocationAsync(strReticleID, strLocation);
        }
        
        public System.Data.DataTable EMS_CheckEMS_Tools_Utl(string strReportDate, string strShiftTime) {
            return base.Channel.EMS_CheckEMS_Tools_Utl(strReportDate, strShiftTime);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> EMS_CheckEMS_Tools_UtlAsync(string strReportDate, string strShiftTime) {
            return base.Channel.EMS_CheckEMS_Tools_UtlAsync(strReportDate, strShiftTime);
        }
        
        public string EMS_GetEntityLocation(string sEntity) {
            return base.Channel.EMS_GetEntityLocation(sEntity);
        }
        
        public System.Threading.Tasks.Task<string> EMS_GetEntityLocationAsync(string sEntity) {
            return base.Channel.EMS_GetEntityLocationAsync(sEntity);
        }
        
        public string EMS_GetReticleListByEQPID(string sEQPID) {
            return base.Channel.EMS_GetReticleListByEQPID(sEQPID);
        }
        
        public System.Threading.Tasks.Task<string> EMS_GetReticleListByEQPIDAsync(string sEQPID) {
            return base.Channel.EMS_GetReticleListByEQPIDAsync(sEQPID);
        }
        
        public bool EMS_IsToolInTQCList(string sEQPID) {
            return base.Channel.EMS_IsToolInTQCList(sEQPID);
        }
        
        public System.Threading.Tasks.Task<bool> EMS_IsToolInTQCListAsync(string sEQPID) {
            return base.Channel.EMS_IsToolInTQCListAsync(sEQPID);
        }
        
        public bool EMS_IsTQCEQPState(string sEQPID, string sEventName, string sSubState) {
            return base.Channel.EMS_IsTQCEQPState(sEQPID, sEventName, sSubState);
        }
        
        public System.Threading.Tasks.Task<bool> EMS_IsTQCEQPStateAsync(string sEQPID, string sEventName, string sSubState) {
            return base.Channel.EMS_IsTQCEQPStateAsync(sEQPID, sEventName, sSubState);
        }
        
        public void EMS_UpdateEMS_Tools_Utl(string strReportDate, string strShiftTime) {
            base.Channel.EMS_UpdateEMS_Tools_Utl(strReportDate, strShiftTime);
        }
        
        public System.Threading.Tasks.Task EMS_UpdateEMS_Tools_UtlAsync(string strReportDate, string strShiftTime) {
            return base.Channel.EMS_UpdateEMS_Tools_UtlAsync(strReportDate, strShiftTime);
        }
        
        public void EMS_UpdateEMS_Tools_Utl_STDMonitor(string strEQPID, string strSTDMonitorTime, string strReportDate) {
            base.Channel.EMS_UpdateEMS_Tools_Utl_STDMonitor(strEQPID, strSTDMonitorTime, strReportDate);
        }
        
        public System.Threading.Tasks.Task EMS_UpdateEMS_Tools_Utl_STDMonitorAsync(string strEQPID, string strSTDMonitorTime, string strReportDate) {
            return base.Channel.EMS_UpdateEMS_Tools_Utl_STDMonitorAsync(strEQPID, strSTDMonitorTime, strReportDate);
        }
        
        public void EMS_UpdateEMS_Tools_Utl_STDPM(string strEQPID, string strSTDPMTime, string strReportDate) {
            base.Channel.EMS_UpdateEMS_Tools_Utl_STDPM(strEQPID, strSTDPMTime, strReportDate);
        }
        
        public System.Threading.Tasks.Task EMS_UpdateEMS_Tools_Utl_STDPMAsync(string strEQPID, string strSTDPMTime, string strReportDate) {
            return base.Channel.EMS_UpdateEMS_Tools_Utl_STDPMAsync(strEQPID, strSTDPMTime, strReportDate);
        }
        
        public System.Data.DataTable Entity_QueryPortInfo(string EQP_ID) {
            return base.Channel.Entity_QueryPortInfo(EQP_ID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Entity_QueryPortInfoAsync(string EQP_ID) {
            return base.Channel.Entity_QueryPortInfoAsync(EQP_ID);
        }
        
        public System.Data.DataTable Entity_QuerySchedulesEx(System.DateTime strStartDate, System.DateTime strEndDate) {
            return base.Channel.Entity_QuerySchedulesEx(strStartDate, strEndDate);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> Entity_QuerySchedulesExAsync(System.DateTime strStartDate, System.DateTime strEndDate) {
            return base.Channel.Entity_QuerySchedulesExAsync(strStartDate, strEndDate);
        }
        
        public System.Data.DataTable FB_getFlowBlockTreeFromRDB(string strFlowBlockNS, string strFlowBlockID, int iFlowBlockVer, int iFlowBlockLevelNum) {
            return base.Channel.FB_getFlowBlockTreeFromRDB(strFlowBlockNS, strFlowBlockID, iFlowBlockVer, iFlowBlockLevelNum);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FB_getFlowBlockTreeFromRDBAsync(string strFlowBlockNS, string strFlowBlockID, int iFlowBlockVer, int iFlowBlockLevelNum) {
            return base.Channel.FB_getFlowBlockTreeFromRDBAsync(strFlowBlockNS, strFlowBlockID, iFlowBlockVer, iFlowBlockLevelNum);
        }
        
        public System.Data.DataTable FB_GetProdFlowBlock(string productID) {
            return base.Channel.FB_GetProdFlowBlock(productID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> FB_GetProdFlowBlockAsync(string productID) {
            return base.Channel.FB_GetProdFlowBlockAsync(productID);
        }
        
        public string GetOpJobIdGC(string strOPJOBID) {
            return base.Channel.GetOpJobIdGC(strOPJOBID);
        }
        
        public System.Threading.Tasks.Task<string> GetOpJobIdGCAsync(string strOPJOBID) {
            return base.Channel.GetOpJobIdGCAsync(strOPJOBID);
        }
        
        public System.Data.DataTable GetSourceProdIDList(string strLotid) {
            return base.Channel.GetSourceProdIDList(strLotid);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> GetSourceProdIDListAsync(string strLotid) {
            return base.Channel.GetSourceProdIDListAsync(strLotid);
        }
        
        public System.Data.DataTable getToolEDCData(int iPageIndex, string strDep, string strMachineCode, string strStartDate, string strEndDate, bool isAllPass) {
            return base.Channel.getToolEDCData(iPageIndex, strDep, strMachineCode, strStartDate, strEndDate, isAllPass);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> getToolEDCDataAsync(int iPageIndex, string strDep, string strMachineCode, string strStartDate, string strEndDate, bool isAllPass) {
            return base.Channel.getToolEDCDataAsync(iPageIndex, strDep, strMachineCode, strStartDate, strEndDate, isAllPass);
        }
        
        public string HelloWorld() {
            return base.Channel.HelloWorld();
        }
        
        public System.Threading.Tasks.Task<string> HelloWorldAsync() {
            return base.Channel.HelloWorldAsync();
        }
        
        public string JIG_UpdateUsageCount(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, string strAction) {
            return base.Channel.JIG_UpdateUsageCount(strNamespace, strRecipeObjectID, strToolsID, iWaferQty, strAction);
        }
        
        public System.Threading.Tasks.Task<string> JIG_UpdateUsageCountAsync(string strNamespace, string strRecipeObjectID, string strToolsID, int iWaferQty, string strAction) {
            return base.Channel.JIG_UpdateUsageCountAsync(strNamespace, strRecipeObjectID, strToolsID, iWaferQty, strAction);
        }
        
        public void LOT_AdjustLot(string sLotID, string[] udaName, string[] udaValue) {
            base.Channel.LOT_AdjustLot(sLotID, udaName, udaValue);
        }
        
        public System.Threading.Tasks.Task LOT_AdjustLotAsync(string sLotID, string[] udaName, string[] udaValue) {
            return base.Channel.LOT_AdjustLotAsync(sLotID, udaName, udaValue);
        }
        
        public string LOT_AdjustLotPriority(System.Data.DataTable dtLotPriority) {
            return base.Channel.LOT_AdjustLotPriority(dtLotPriority);
        }
        
        public System.Threading.Tasks.Task<string> LOT_AdjustLotPriorityAsync(System.Data.DataTable dtLotPriority) {
            return base.Channel.LOT_AdjustLotPriorityAsync(dtLotPriority);
        }
        
        public void LOT_CancelSamplingSizeCtrl(string sLotID) {
            base.Channel.LOT_CancelSamplingSizeCtrl(sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_CancelSamplingSizeCtrlAsync(string sLotID) {
            return base.Channel.LOT_CancelSamplingSizeCtrlAsync(sLotID);
        }
        
        public void LOT_CancelSamplingSizeForMultiCtrl(string sLotID) {
            base.Channel.LOT_CancelSamplingSizeForMultiCtrl(sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_CancelSamplingSizeForMultiCtrlAsync(string sLotID) {
            return base.Channel.LOT_CancelSamplingSizeForMultiCtrlAsync(sLotID);
        }
        
        public System.Data.DataTable LOT_CheckDieTypeSettingForSPC(string strLotID) {
            return base.Channel.LOT_CheckDieTypeSettingForSPC(strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_CheckDieTypeSettingForSPCAsync(string strLotID) {
            return base.Channel.LOT_CheckDieTypeSettingForSPCAsync(strLotID);
        }
        
        public System.Data.DataTable LOT_CheckMapData(string strLotID) {
            return base.Channel.LOT_CheckMapData(strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_CheckMapDataAsync(string strLotID) {
            return base.Channel.LOT_CheckMapDataAsync(strLotID);
        }
        
        public System.Data.DataTable LOT_Check_ActionList(string strLotID, string strActionName, string strMessage) {
            return base.Channel.LOT_Check_ActionList(strLotID, strActionName, strMessage);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_Check_ActionListAsync(string strLotID, string strActionName, string strMessage) {
            return base.Channel.LOT_Check_ActionListAsync(strLotID, strActionName, strMessage);
        }
        
        public string LOT_ChgSourceLotSlotMapAfterLotWaferStart(string sEQPID, string sFOSB, string sNewSlotMap) {
            return base.Channel.LOT_ChgSourceLotSlotMapAfterLotWaferStart(sEQPID, sFOSB, sNewSlotMap);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ChgSourceLotSlotMapAfterLotWaferStartAsync(string sEQPID, string sFOSB, string sNewSlotMap) {
            return base.Channel.LOT_ChgSourceLotSlotMapAfterLotWaferStartAsync(sEQPID, sFOSB, sNewSlotMap);
        }
        
        public bool LOT_ChkCPdata(string sSourceLotID) {
            return base.Channel.LOT_ChkCPdata(sSourceLotID);
        }
        
        public System.Threading.Tasks.Task<bool> LOT_ChkCPdataAsync(string sSourceLotID) {
            return base.Channel.LOT_ChkCPdataAsync(sSourceLotID);
        }
        
        public string LOT_ChkInResetMapData(string sLotID) {
            return base.Channel.LOT_ChkInResetMapData(sLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ChkInResetMapDataAsync(string sLotID) {
            return base.Channel.LOT_ChkInResetMapDataAsync(sLotID);
        }
        
        public void LOT_ChkIR(string sSourceLotID, string sLotID) {
            base.Channel.LOT_ChkIR(sSourceLotID, sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_ChkIRAsync(string sSourceLotID, string sLotID) {
            return base.Channel.LOT_ChkIRAsync(sSourceLotID, sLotID);
        }
        
        public void LOT_ChkMultiLotInOneCarrier(string[] sLeft, string[] sRight, string sType) {
            base.Channel.LOT_ChkMultiLotInOneCarrier(sLeft, sRight, sType);
        }
        
        public System.Threading.Tasks.Task LOT_ChkMultiLotInOneCarrierAsync(string[] sLeft, string[] sRight, string sType) {
            return base.Channel.LOT_ChkMultiLotInOneCarrierAsync(sLeft, sRight, sType);
        }
        
        public string LOT_ChkOriginalQty(string sLotID) {
            return base.Channel.LOT_ChkOriginalQty(sLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ChkOriginalQtyAsync(string sLotID) {
            return base.Channel.LOT_ChkOriginalQtyAsync(sLotID);
        }
        
        public bool LOT_ChkReserveMsg(string[] sList, string sPurpose) {
            return base.Channel.LOT_ChkReserveMsg(sList, sPurpose);
        }
        
        public System.Threading.Tasks.Task<bool> LOT_ChkReserveMsgAsync(string[] sList, string sPurpose) {
            return base.Channel.LOT_ChkReserveMsgAsync(sList, sPurpose);
        }
        
        public void LOT_ChkShip(string sLotID, string sEvent) {
            base.Channel.LOT_ChkShip(sLotID, sEvent);
        }
        
        public System.Threading.Tasks.Task LOT_ChkShipAsync(string sLotID, string sEvent) {
            return base.Channel.LOT_ChkShipAsync(sLotID, sEvent);
        }
        
        public string LOT_ChkUpdateSourceLotMap(string sEQPID, string sFOSB, string sNewSlotMap) {
            return base.Channel.LOT_ChkUpdateSourceLotMap(sEQPID, sFOSB, sNewSlotMap);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ChkUpdateSourceLotMapAsync(string sEQPID, string sFOSB, string sNewSlotMap) {
            return base.Channel.LOT_ChkUpdateSourceLotMapAsync(sEQPID, sFOSB, sNewSlotMap);
        }
        
        public void LOT_ChkWaferStart(string sSourceLotID, string sLotID) {
            base.Channel.LOT_ChkWaferStart(sSourceLotID, sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_ChkWaferStartAsync(string sSourceLotID, string sLotID) {
            return base.Channel.LOT_ChkWaferStartAsync(sSourceLotID, sLotID);
        }
        
        public void LOT_ChkWaitingLotData(string[] sList) {
            base.Channel.LOT_ChkWaitingLotData(sList);
        }
        
        public System.Threading.Tasks.Task LOT_ChkWaitingLotDataAsync(string[] sList) {
            return base.Channel.LOT_ChkWaitingLotDataAsync(sList);
        }
        
        public string LOT_CreateLot(System.Data.DataTable dt) {
            return base.Channel.LOT_CreateLot(dt);
        }
        
        public System.Threading.Tasks.Task<string> LOT_CreateLotAsync(System.Data.DataTable dt) {
            return base.Channel.LOT_CreateLotAsync(dt);
        }
        
        public System.Data.DataTable LOT_CreateSourceLotExternal(System.Data.DataTable dt) {
            return base.Channel.LOT_CreateSourceLotExternal(dt);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_CreateSourceLotExternalAsync(System.Data.DataTable dt) {
            return base.Channel.LOT_CreateSourceLotExternalAsync(dt);
        }
        
        public string LOT_ExternalSystemPreCheck(string strAction, string[] strParaValue) {
            return base.Channel.LOT_ExternalSystemPreCheck(strAction, strParaValue);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ExternalSystemPreCheckAsync(string strAction, string[] strParaValue) {
            return base.Channel.LOT_ExternalSystemPreCheckAsync(strAction, strParaValue);
        }
        
        public System.Data.DataTable LOT_GetCPdata(string sCustLot) {
            return base.Channel.LOT_GetCPdata(sCustLot);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetCPdataAsync(string sCustLot) {
            return base.Channel.LOT_GetCPdataAsync(sCustLot);
        }
        
        public System.Data.DataTable LOT_GetCurrentWIP(string sLotID) {
            return base.Channel.LOT_GetCurrentWIP(sLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetCurrentWIPAsync(string sLotID) {
            return base.Channel.LOT_GetCurrentWIPAsync(sLotID);
        }
        
        public System.Data.DataTable LOT_GetCustomerReferenceInfo(string sLotID, string strCustRefTPL) {
            return base.Channel.LOT_GetCustomerReferenceInfo(sLotID, strCustRefTPL);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetCustomerReferenceInfoAsync(string sLotID, string strCustRefTPL) {
            return base.Channel.LOT_GetCustomerReferenceInfoAsync(sLotID, strCustRefTPL);
        }
        
        public string LOT_GetInputSequence(string sLotID) {
            return base.Channel.LOT_GetInputSequence(sLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetInputSequenceAsync(string sLotID) {
            return base.Channel.LOT_GetInputSequenceAsync(sLotID);
        }
        
        public System.Data.DataTable LOT_GetMarkingInformation(string sLotID) {
            return base.Channel.LOT_GetMarkingInformation(sLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetMarkingInformationAsync(string sLotID) {
            return base.Channel.LOT_GetMarkingInformationAsync(sLotID);
        }
        
        public string LOT_GetNewCustomerLotForShip(string sLotID) {
            return base.Channel.LOT_GetNewCustomerLotForShip(sLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetNewCustomerLotForShipAsync(string sLotID) {
            return base.Channel.LOT_GetNewCustomerLotForShipAsync(sLotID);
        }
        
        public string LOT_GetNewSlotList(string sSlotList) {
            return base.Channel.LOT_GetNewSlotList(sSlotList);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetNewSlotListAsync(string sSlotList) {
            return base.Channel.LOT_GetNewSlotListAsync(sSlotList);
        }
        
        public string LOT_GetPackageQty(string sProductID, string sPackageType) {
            return base.Channel.LOT_GetPackageQty(sProductID, sPackageType);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetPackageQtyAsync(string sProductID, string sPackageType) {
            return base.Channel.LOT_GetPackageQtyAsync(sProductID, sPackageType);
        }
        
        public string LOT_GetPickingListToSAP(string strPickingNo) {
            return base.Channel.LOT_GetPickingListToSAP(strPickingNo);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetPickingListToSAPAsync(string strPickingNo) {
            return base.Channel.LOT_GetPickingListToSAPAsync(strPickingNo);
        }
        
        public System.Data.DataTable LOT_GetPlanLots(string startTime, string endTime, string wildcard) {
            return base.Channel.LOT_GetPlanLots(startTime, endTime, wildcard);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetPlanLotsAsync(string startTime, string endTime, string wildcard) {
            return base.Channel.LOT_GetPlanLotsAsync(startTime, endTime, wildcard);
        }
        
        public System.Data.DataTable LOT_GetProdDesc(string sLotList) {
            return base.Channel.LOT_GetProdDesc(sLotList);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetProdDescAsync(string sLotList) {
            return base.Channel.LOT_GetProdDescAsync(sLotList);
        }
        
        public string LOT_GetProdGroup(string sLotID) {
            return base.Channel.LOT_GetProdGroup(sLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetProdGroupAsync(string sLotID) {
            return base.Channel.LOT_GetProdGroupAsync(sLotID);
        }
        
        public System.Data.DataTable LOT_GetProductDetail(string productName, int productVersion) {
            return base.Channel.LOT_GetProductDetail(productName, productVersion);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetProductDetailAsync(string productName, int productVersion) {
            return base.Channel.LOT_GetProductDetailAsync(productName, productVersion);
        }
        
        public System.Data.DataTable LOT_GetProductLists(string filter, string productID, string productGroupID, int isCurrentVersion) {
            return base.Channel.LOT_GetProductLists(filter, productID, productGroupID, isCurrentVersion);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetProductListsAsync(string filter, string productID, string productGroupID, int isCurrentVersion) {
            return base.Channel.LOT_GetProductListsAsync(filter, productID, productGroupID, isCurrentVersion);
        }
        
        public string Lot_GetRemindingCycleTm(int iLotPriority, string strProductID, string strChildGC, string strReworkGC) {
            return base.Channel.Lot_GetRemindingCycleTm(iLotPriority, strProductID, strChildGC, strReworkGC);
        }
        
        public System.Threading.Tasks.Task<string> Lot_GetRemindingCycleTmAsync(int iLotPriority, string strProductID, string strChildGC, string strReworkGC) {
            return base.Channel.Lot_GetRemindingCycleTmAsync(iLotPriority, strProductID, strChildGC, strReworkGC);
        }
        
        public System.Data.DataTable LOT_GetSorterReservedLots(string EQPID) {
            return base.Channel.LOT_GetSorterReservedLots(EQPID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSorterReservedLotsAsync(string EQPID) {
            return base.Channel.LOT_GetSorterReservedLotsAsync(EQPID);
        }
        
        public System.Data.DataTable LOT_GetSorterWaitingLots(string EQPID) {
            return base.Channel.LOT_GetSorterWaitingLots(EQPID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSorterWaitingLotsAsync(string EQPID) {
            return base.Channel.LOT_GetSorterWaitingLotsAsync(EQPID);
        }
        
        public System.Data.DataTable LOT_GetSourceLotInfo(string sSourceLotID) {
            return base.Channel.LOT_GetSourceLotInfo(sSourceLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSourceLotInfoAsync(string sSourceLotID) {
            return base.Channel.LOT_GetSourceLotInfoAsync(sSourceLotID);
        }
        
        public System.Data.DataTable LOT_GetSpecificData(string[] sLotList, string sType) {
            return base.Channel.LOT_GetSpecificData(sLotList, sType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetSpecificDataAsync(string[] sLotList, string sType) {
            return base.Channel.LOT_GetSpecificDataAsync(sLotList, sType);
        }
        
        public string LOT_GetTraceCodeForACSTSC(string strNamespace, string strLotID) {
            return base.Channel.LOT_GetTraceCodeForACSTSC(strNamespace, strLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetTraceCodeForACSTSCAsync(string strNamespace, string strLotID) {
            return base.Channel.LOT_GetTraceCodeForACSTSCAsync(strNamespace, strLotID);
        }
        
        public System.Data.DataTable LOT_GetWaferBankList(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string strSortName) {
            return base.Channel.LOT_GetWaferBankList(iPageIndex, iPageSize, strFilterName, strFilterValue, strSortName);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetWaferBankListAsync(int iPageIndex, int iPageSize, string[] strFilterName, string[] strFilterValue, string strSortName) {
            return base.Channel.LOT_GetWaferBankListAsync(iPageIndex, iPageSize, strFilterName, strFilterValue, strSortName);
        }
        
        public string LOT_GetWaferStartCarrierCategoryByLot(string sLotID) {
            return base.Channel.LOT_GetWaferStartCarrierCategoryByLot(sLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_GetWaferStartCarrierCategoryByLotAsync(string sLotID) {
            return base.Channel.LOT_GetWaferStartCarrierCategoryByLotAsync(sLotID);
        }
        
        public System.Data.DataTable LOT_GetWaferStartCarrierGroup(string sOperation, string sProductGroup, string sProductID, string sLotType) {
            return base.Channel.LOT_GetWaferStartCarrierGroup(sOperation, sProductGroup, sProductID, sLotType);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetWaferStartCarrierGroupAsync(string sOperation, string sProductGroup, string sProductID, string sLotType) {
            return base.Channel.LOT_GetWaferStartCarrierGroupAsync(sOperation, sProductGroup, sProductID, sLotType);
        }
        
        public System.Data.DataTable LOT_GetWaferStartData(string sDate1, string sDate2) {
            return base.Channel.LOT_GetWaferStartData(sDate1, sDate2);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_GetWaferStartDataAsync(string sDate1, string sDate2) {
            return base.Channel.LOT_GetWaferStartDataAsync(sDate1, sDate2);
        }
        
        public string LOT_InsertOptionMapData(string strLotid, string strSlot) {
            return base.Channel.LOT_InsertOptionMapData(strLotid, strSlot);
        }
        
        public System.Threading.Tasks.Task<string> LOT_InsertOptionMapDataAsync(string strLotid, string strSlot) {
            return base.Channel.LOT_InsertOptionMapDataAsync(strLotid, strSlot);
        }
        
        public System.Data.DataTable LOT_LoadSubPanelCarrierList(string strLotID) {
            return base.Channel.LOT_LoadSubPanelCarrierList(strLotID);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> LOT_LoadSubPanelCarrierListAsync(string strLotID) {
            return base.Channel.LOT_LoadSubPanelCarrierListAsync(strLotID);
        }
        
        public bool LOT_MergeBypassIdle(string sLotID) {
            return base.Channel.LOT_MergeBypassIdle(sLotID);
        }
        
        public System.Threading.Tasks.Task<bool> LOT_MergeBypassIdleAsync(string sLotID) {
            return base.Channel.LOT_MergeBypassIdleAsync(sLotID);
        }
        
        public void LOT_OneEntityAdjustment(string sLotID) {
            base.Channel.LOT_OneEntityAdjustment(sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_OneEntityAdjustmentAsync(string sLotID) {
            return base.Channel.LOT_OneEntityAdjustmentAsync(sLotID);
        }
        
        public string LOT_PackageLotCheckQtyUpdateUda(string strLotID, string strRoute, string strLayer, string strStage, string strOperation) {
            return base.Channel.LOT_PackageLotCheckQtyUpdateUda(strLotID, strRoute, strLayer, strStage, strOperation);
        }
        
        public System.Threading.Tasks.Task<string> LOT_PackageLotCheckQtyUpdateUdaAsync(string strLotID, string strRoute, string strLayer, string strStage, string strOperation) {
            return base.Channel.LOT_PackageLotCheckQtyUpdateUdaAsync(strLotID, strRoute, strLayer, strStage, strOperation);
        }
        
        public string LOT_QueryLogicalRecipeByEQP(string EQP) {
            return base.Channel.LOT_QueryLogicalRecipeByEQP(EQP);
        }
        
        public System.Threading.Tasks.Task<string> LOT_QueryLogicalRecipeByEQPAsync(string EQP) {
            return base.Channel.LOT_QueryLogicalRecipeByEQPAsync(EQP);
        }
        
        public void LOT_ReleaseProductionOrder(string sLotID) {
            base.Channel.LOT_ReleaseProductionOrder(sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_ReleaseProductionOrderAsync(string sLotID) {
            return base.Channel.LOT_ReleaseProductionOrderAsync(sLotID);
        }
        
        public string LOT_ReleaseProductionOrder2(string sPlant, string sSEQNO, string sITEMNO, string sAUFNR, string sTYPE) {
            return base.Channel.LOT_ReleaseProductionOrder2(sPlant, sSEQNO, sITEMNO, sAUFNR, sTYPE);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ReleaseProductionOrder2Async(string sPlant, string sSEQNO, string sITEMNO, string sAUFNR, string sTYPE) {
            return base.Channel.LOT_ReleaseProductionOrder2Async(sPlant, sSEQNO, sITEMNO, sAUFNR, sTYPE);
        }
        
        public void LOT_SamplingSizeCtrl(string sLotID) {
            base.Channel.LOT_SamplingSizeCtrl(sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_SamplingSizeCtrlAsync(string sLotID) {
            return base.Channel.LOT_SamplingSizeCtrlAsync(sLotID);
        }
        
        public void LOT_SamplingSizeCtrlResult(string sLotID, string sResult) {
            base.Channel.LOT_SamplingSizeCtrlResult(sLotID, sResult);
        }
        
        public System.Threading.Tasks.Task LOT_SamplingSizeCtrlResultAsync(string sLotID, string sResult) {
            return base.Channel.LOT_SamplingSizeCtrlResultAsync(sLotID, sResult);
        }
        
        public bool LOT_SamplingSizeCtrlSkipOpration(string sLotID, string sOperation) {
            return base.Channel.LOT_SamplingSizeCtrlSkipOpration(sLotID, sOperation);
        }
        
        public System.Threading.Tasks.Task<bool> LOT_SamplingSizeCtrlSkipOprationAsync(string sLotID, string sOperation) {
            return base.Channel.LOT_SamplingSizeCtrlSkipOprationAsync(sLotID, sOperation);
        }
        
        public void LOT_SamplingSizeForMultiCtrl(string sAction, string sLotID, string sCurrSPCResult, string sGroup) {
            base.Channel.LOT_SamplingSizeForMultiCtrl(sAction, sLotID, sCurrSPCResult, sGroup);
        }
        
        public System.Threading.Tasks.Task LOT_SamplingSizeForMultiCtrlAsync(string sAction, string sLotID, string sCurrSPCResult, string sGroup) {
            return base.Channel.LOT_SamplingSizeForMultiCtrlAsync(sAction, sLotID, sCurrSPCResult, sGroup);
        }
        
        public void LOT_SamplingSizeForMultiCtrlResult(string sGroup, string sLotID, string sResult) {
            base.Channel.LOT_SamplingSizeForMultiCtrlResult(sGroup, sLotID, sResult);
        }
        
        public System.Threading.Tasks.Task LOT_SamplingSizeForMultiCtrlResultAsync(string sGroup, string sLotID, string sResult) {
            return base.Channel.LOT_SamplingSizeForMultiCtrlResultAsync(sGroup, sLotID, sResult);
        }
        
        public bool LOT_SamplingSizeForMultiCtrlSkipOpration(string sLotID, string sOperation) {
            return base.Channel.LOT_SamplingSizeForMultiCtrlSkipOpration(sLotID, sOperation);
        }
        
        public System.Threading.Tasks.Task<bool> LOT_SamplingSizeForMultiCtrlSkipOprationAsync(string sLotID, string sOperation) {
            return base.Channel.LOT_SamplingSizeForMultiCtrlSkipOprationAsync(sLotID, sOperation);
        }
        
        public string LOT_ShippingToDieBank(string strLotID) {
            return base.Channel.LOT_ShippingToDieBank(strLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ShippingToDieBankAsync(string strLotID) {
            return base.Channel.LOT_ShippingToDieBankAsync(strLotID);
        }
        
        public string LOT_ShippingToWarehouse(string sLotID, string sFunction) {
            return base.Channel.LOT_ShippingToWarehouse(sLotID, sFunction);
        }
        
        public System.Threading.Tasks.Task<string> LOT_ShippingToWarehouseAsync(string sLotID, string sFunction) {
            return base.Channel.LOT_ShippingToWarehouseAsync(sLotID, sFunction);
        }
        
        public string LOT_UnShippingFromDieBank(string strLotID) {
            return base.Channel.LOT_UnShippingFromDieBank(strLotID);
        }
        
        public System.Threading.Tasks.Task<string> LOT_UnShippingFromDieBankAsync(string strLotID) {
            return base.Channel.LOT_UnShippingFromDieBankAsync(strLotID);
        }
        
        public string LOT_UnShippingFromWarehouse(string sLotID, string sFunction) {
            return base.Channel.LOT_UnShippingFromWarehouse(sLotID, sFunction);
        }
        
        public System.Threading.Tasks.Task<string> LOT_UnShippingFromWarehouseAsync(string sLotID, string sFunction) {
            return base.Channel.LOT_UnShippingFromWarehouseAsync(sLotID, sFunction);
        }
        
        public void LOT_UpdataMappingData(string strLotID) {
            base.Channel.LOT_UpdataMappingData(strLotID);
        }
        
        public System.Threading.Tasks.Task LOT_UpdataMappingDataAsync(string strLotID) {
            return base.Channel.LOT_UpdataMappingDataAsync(strLotID);
        }
        
        public void LOT_Upd_BR_WorkOrderFlag(string sLotID, string sFlag) {
            base.Channel.LOT_Upd_BR_WorkOrderFlag(sLotID, sFlag);
        }
        
        public System.Threading.Tasks.Task LOT_Upd_BR_WorkOrderFlagAsync(string sLotID, string sFlag) {
            return base.Channel.LOT_Upd_BR_WorkOrderFlagAsync(sLotID, sFlag);
        }
        
        public void LOT_WaferStart(string sLotID) {
            base.Channel.LOT_WaferStart(sLotID);
        }
        
        public System.Threading.Tasks.Task LOT_WaferStartAsync(string sLotID) {
            return base.Channel.LOT_WaferStartAsync(sLotID);
        }
        
        public string MAIL_GetNoticeMailGroupList(string strProgramID, string strGroupID) {
            return base.Channel.MAIL_GetNoticeMailGroupList(strProgramID, strGroupID);
        }
        
        public System.Threading.Tasks.Task<string> MAIL_GetNoticeMailGroupListAsync(string strProgramID, string strGroupID) {
            return base.Channel.MAIL_GetNoticeMailGroupListAsync(strProgramID, strGroupID);
        }
        
        public string MAIL_GetNoticeMailGroupList_withArea(string strProgramID, string strGroupID, string strArea, string strPlant) {
            return base.Channel.MAIL_GetNoticeMailGroupList_withArea(strProgramID, strGroupID, strArea, strPlant);
        }
        
        public System.Threading.Tasks.Task<string> MAIL_GetNoticeMailGroupList_withAreaAsync(string strProgramID, string strGroupID, string strArea, string strPlant) {
            return base.Channel.MAIL_GetNoticeMailGroupList_withAreaAsync(strProgramID, strGroupID, strArea, strPlant);
        }
        
        public string MAIL_GetNoticeMailTitle(string strProgramID, string strGroupID) {
            return base.Channel.MAIL_GetNoticeMailTitle(strProgramID, strGroupID);
        }
        
        public System.Threading.Tasks.Task<string> MAIL_GetNoticeMailTitleAsync(string strProgramID, string strGroupID) {
            return base.Channel.MAIL_GetNoticeMailTitleAsync(strProgramID, strGroupID);
        }
        
        public string MAIL_GetNoticeMailTitle_withArea(string strProgramID, string strGroupID, string strArea, string strPlant) {
            return base.Channel.MAIL_GetNoticeMailTitle_withArea(strProgramID, strGroupID, strArea, strPlant);
        }
        
        public System.Threading.Tasks.Task<string> MAIL_GetNoticeMailTitle_withAreaAsync(string strProgramID, string strGroupID, string strArea, string strPlant) {
            return base.Channel.MAIL_GetNoticeMailTitle_withAreaAsync(strProgramID, strGroupID, strArea, strPlant);
        }
        
        public string MAP_GetCheckSum(string sWaferID) {
            return base.Channel.MAP_GetCheckSum(sWaferID);
        }
        
        public System.Threading.Tasks.Task<string> MAP_GetCheckSumAsync(string sWaferID) {
            return base.Channel.MAP_GetCheckSumAsync(sWaferID);
        }
        
        public string MAP_GetCustomerDeviceForShipbySubPanelLot(string strSubPanelLotID) {
            return base.Channel.MAP_GetCustomerDeviceForShipbySubPanelLot(strSubPanelLotID);
        }
        
        public System.Threading.Tasks.Task<string> MAP_GetCustomerDeviceForShipbySubPanelLotAsync(string strSubPanelLotID) {
            return base.Channel.MAP_GetCustomerDeviceForShipbySubPanelLotAsync(strSubPanelLotID);
        }
        
        public string MAP_GetCustomerLotListbyMatl(string sLotList) {
            return base.Channel.MAP_GetCustomerLotListbyMatl(sLotList);
        }
        
        public System.Threading.Tasks.Task<string> MAP_GetCustomerLotListbyMatlAsync(string sLotList) {
            return base.Channel.MAP_GetCustomerLotListbyMatlAsync(sLotList);
        }
        
        public string MAP_GetCustomerLotListbySubMatl(string sLotList) {
            return base.Channel.MAP_GetCustomerLotListbySubMatl(sLotList);
        }
        
        public System.Threading.Tasks.Task<string> MAP_GetCustomerLotListbySubMatlAsync(string sLotList) {
            return base.Channel.MAP_GetCustomerLotListbySubMatlAsync(sLotList);
        }
        
        public string MAP_GetPassFailQty(string strLotID) {
            return base.Channel.MAP_GetPassFailQty(strLotID);
        }
        
        public System.Threading.Tasks.Task<string> MAP_GetPassFailQtyAsync(string strLotID) {
            return base.Channel.MAP_GetPassFailQtyAsync(strLotID);
        }
        
        public void MCS_Check_Tool(string EQP_ID) {
            base.Channel.MCS_Check_Tool(EQP_ID);
        }
        
        public System.Threading.Tasks.Task MCS_Check_ToolAsync(string EQP_ID) {
            return base.Channel.MCS_Check_ToolAsync(EQP_ID);
        }
        
        public void MCS_LABEL_PRINT_RECORD(string MCS_LB_NO, string sUserID) {
            base.Channel.MCS_LABEL_PRINT_RECORD(MCS_LB_NO, sUserID);
        }
        
        public System.Threading.Tasks.Task MCS_LABEL_PRINT_RECORDAsync(string MCS_LB_NO, string sUserID) {
            return base.Channel.MCS_LABEL_PRINT_RECORDAsync(MCS_LB_NO, sUserID);
        }
        
        public System.Data.DataTable MCS_LABEL_QUERY_DETAIL(string MCS_LB_NO) {
            return base.Channel.MCS_LABEL_QUERY_DETAIL(MCS_LB_NO);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> MCS_LABEL_QUERY_DETAILAsync(string MCS_LB_NO) {
            return base.Channel.MCS_LABEL_QUERY_DETAILAsync(MCS_LB_NO);
        }
        
        public System.Data.DataTable MCS_LABEL_QUERY_LIST() {
            return base.Channel.MCS_LABEL_QUERY_LIST();
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> MCS_LABEL_QUERY_LISTAsync() {
            return base.Channel.MCS_LABEL_QUERY_LISTAsync();
        }
        
        public void MCS_WS(string sType, string[] sArgv) {
            base.Channel.MCS_WS(sType, sArgv);
        }
        
        public System.Threading.Tasks.Task MCS_WSAsync(string sType, string[] sArgv) {
            return base.Channel.MCS_WSAsync(sType, sArgv);
        }
        
        public string MMS_CancelWaferStart(string strPART_NO, int iQty) {
            return base.Channel.MMS_CancelWaferStart(strPART_NO, iQty);
        }
        
        public System.Threading.Tasks.Task<string> MMS_CancelWaferStartAsync(string strPART_NO, int iQty) {
            return base.Channel.MMS_CancelWaferStartAsync(strPART_NO, iQty);
        }
        
        public void MMS_GLASS_UpdateCountRecord() {
            base.Channel.MMS_GLASS_UpdateCountRecord();
        }
        
        public System.Threading.Tasks.Task MMS_GLASS_UpdateCountRecordAsync() {
            return base.Channel.MMS_GLASS_UpdateCountRecordAsync();
        }
        
        public string MMS_UpdateGlassUsageCount(string sUserID, string sLotID, string strWaferScribeID, string strMode) {
            return base.Channel.MMS_UpdateGlassUsageCount(sUserID, sLotID, strWaferScribeID, strMode);
        }
        
        public System.Threading.Tasks.Task<string> MMS_UpdateGlassUsageCountAsync(string sUserID, string sLotID, string strWaferScribeID, string strMode) {
            return base.Channel.MMS_UpdateGlassUsageCountAsync(sUserID, sLotID, strWaferScribeID, strMode);
        }
        
        public System.Data.DataTable NPW_GetTQP(string sEQPID, string sSrcProd) {
            return base.Channel.NPW_GetTQP(sEQPID, sSrcProd);
        }
        
        public System.Threading.Tasks.Task<System.Data.DataTable> NPW_GetTQPAsync(string sEQPID, string sSrcProd) {
            return base.Channel.NPW_GetTQPAsync(sEQPID, sSrcProd);
        }
    }
}
